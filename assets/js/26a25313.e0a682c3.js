"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3510],{1631:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var t=n(4848),i=n(8453);const s={},a="TFLite Micro Mnist",l={id:"espressif/\u4e2a\u4eba\u5b66\u4e60/DL/tflit_micro_mnist",title:"TFLite Micro Mnist",description:"\u4f7f\u7528Tflite micro\u8fdb\u884cmnist\u6570\u636e\u96c6\u63a8\u7406",source:"@site/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/DL/tflit_micro_mnist.md",sourceDirName:"espressif/\u4e2a\u4eba\u5b66\u4e60/DL",slug:"/espressif/\u4e2a\u4eba\u5b66\u4e60/DL/tflit_micro_mnist",permalink:"/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/DL/tflit_micro_mnist",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/DL/tflit_micro_mnist.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u5982\u4f55\u4f7f\u7528onnx\u6a21\u578b\u8fdb\u884c\u63a8\u7406",permalink:"/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/DL/onnx_runtime"},next:{title:"TFLite 1DCNN",permalink:"/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/DL/tflite_1dcnn"}},o={},c=[{value:"1.\u642d\u5efa\u6a21\u578b",id:"1\u642d\u5efa\u6a21\u578b",level:3},{value:"2.ESP32-S3\u90e8\u7f72",id:"2esp32-s3\u90e8\u7f72",level:3},{value:"\u6dfb\u52a0\u7ec4\u4ef6",id:"\u6dfb\u52a0\u7ec4\u4ef6",level:4},{value:"\u6dfb\u52a0\u6a21\u578b\u6587\u4ef6",id:"\u6dfb\u52a0\u6a21\u578b\u6587\u4ef6",level:4},{value:"\u9879\u76ee\u4ee3\u7801",id:"\u9879\u76ee\u4ee3\u7801",level:3}];function d(e){const r={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"tflite-micro-mnist",children:"TFLite Micro Mnist"}),"\n",(0,t.jsx)(r.p,{children:"\u4f7f\u7528Tflite micro\u8fdb\u884cmnist\u6570\u636e\u96c6\u63a8\u7406"}),"\n",(0,t.jsx)(r.h3,{id:"1\u642d\u5efa\u6a21\u578b",children:"1.\u642d\u5efa\u6a21\u578b"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"import tensorflow as tf\r\nfrom tensorflow import keras\r\n\r\n#\u52a0\u8f7d\u6570\u636e\u96c6\r\nmnist = tf.keras.datasets.mnist\r\n(train_images, train_labels),(test_images, test_labels) = mnist.load_data()\r\n\r\n#\u8bad\u7ec3\u96c6\u5f52\u4e00\u5316\r\ntrain_x = train_images.reshape((train_images.shape[0], 28, 28, 1))\r\ntrain_x = train_x.astype('float32')/255\r\ntest_x = test_images.reshape((test_images.shape[0], 28, 28, 1))\r\ntest_x = test_x.astype('float32')/255\r\n\r\n#label\u66f4\u6539\u4e3aone-hot\u683c\u5f0f\r\ntrain_y = tf.keras.utils.to_categorical(train_labels)\r\ntest_y = tf.keras.utils.to_categorical(test_labels)\r\n\r\n#\u642d\u5efa\u6a21\u578b\r\nmodel = tf.keras.models.Sequential([\r\n    tf.keras.layers.Conv2D(32, (3, 3), activation=tf.nn.relu, input_shape=(28, 28, 1)),\r\n    tf.keras.layers.MaxPooling2D((2, 2)),\r\n    tf.keras.layers.Conv2D(64, (3, 3), activation=tf.nn.relu),\r\n    tf.keras.layers.MaxPooling2D((2, 2)),\r\n    tf.keras.layers.Conv2D(64, (3, 3), activation=tf.nn.relu),\r\n    tf.keras.layers.Flatten(),\r\n    tf.keras.layers.Dense(64, activation=tf.nn.relu),\r\n    tf.keras.layers.Dense(10, activation=tf.nn.softmax)\r\n])\r\nmodel.compile(optimizer='adam',\r\n              loss='categorical_crossentropy',\r\n              metrics=['accuracy'])\r\n\r\n#\u8bad\u7ec3\u6a21\u578b\r\nmodel.fit(train_x, train_y, epochs=10, batch_size=512,validation_data=(test_x,test_y))\r\nmodel.save(\"mnist.h5\")\r\n\r\n\r\n#\u6a21\u578b\u8f6c\u6362 \u611f\u89c9\u4e0d\u9700\u8981\u5c06\u8f93\u5165\u8f93\u51fa\u91cf\u5316\u4e3aint8\u683c\u5f0f\uff0c\u6539\u4e3afloat\u65b9\u4fbf\u4e00\u70b9\r\nconverter = tf.lite.TFLiteConverter.from_keras_model(model)\r\ntflite_model = converter.convert()\r\nflatbuffer_size = open(\"mnist.tflite\", \"wb\").write(tflite_model)\r\n\r\nprint('The size of the converted flatbuffer is: %d bytes' % flatbuffer_size)\n"})}),"\n",(0,t.jsx)(r.p,{children:"\u8f6c\u6362\u4ee3\u7801"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-shell",children:"!apt-get -qq install xxd\r\n!xxd -i mnist.tflite > mnist.cc\n"})}),"\n",(0,t.jsx)(r.h3,{id:"2esp32-s3\u90e8\u7f72",children:"2.ESP32-S3\u90e8\u7f72"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://github.com/espressif/esp-tflite-micro",children:"https://github.com/espressif/esp-tflite-micro"})}),"\n",(0,t.jsx)(r.h4,{id:"\u6dfb\u52a0\u7ec4\u4ef6",children:"\u6dfb\u52a0\u7ec4\u4ef6"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-shell",children:'idf.py add-dependency "esp-tflite-micro"\n'})}),"\n",(0,t.jsx)(r.h4,{id:"\u6dfb\u52a0\u6a21\u578b\u6587\u4ef6",children:"\u6dfb\u52a0\u6a21\u578b\u6587\u4ef6"}),"\n",(0,t.jsx)(r.p,{children:"\u5c06mnist.cc\u6587\u4ef6\u7684\u6570\u7ec4\u6dfb\u52a0\u5230\u5de5\u7a0b\u4e2d"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-shell",children:"main\r\n\u251c\u2500\u2500 CMakeLists.txt\r\n\u251c\u2500\u2500 idf_component.yml\r\n\u251c\u2500\u2500 include\r\n\u2502   \u2514\u2500\u2500 mnist.h\r\n\u251c\u2500\u2500 main.cc\r\n\u2514\u2500\u2500 mnist.cc\n"})}),"\n",(0,t.jsx)(r.p,{children:"\u5728main.cc\u6dfb\u52a0\u63a8\u7406\u4ee3\u7801"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-c++",children:'#include <stdio.h>\r\n#include <freertos/FreeRTOS.h>\r\n#include <freertos/task.h>\r\n#include "esp_log.h"\r\n#include "tensorflow/lite/micro/micro_mutable_op_resolver.h"\r\n#include "tensorflow/lite/micro/micro_interpreter.h"\r\n#include "tensorflow/lite/micro/system_setup.h"\r\n#include "tensorflow/lite/schema/schema_generated.h"\r\n#include "mnist.h"\r\n\r\nstatic const char *TAG = "TFLITE";\r\nconstexpr int kTensorArenaSize = 262144;\r\nuint8_t tensor_arena[kTensorArenaSize];\r\n\r\nfloat pic[] = {};\r\n\r\nextern "C" void app_main(void)\r\n{\r\n    tflite::MicroInterpreter *interpreter = nullptr;\r\n    TfLiteTensor *input = nullptr;\r\n    TfLiteTensor *output = nullptr;\r\n    int pic_size = sizeof(pic) / sizeof(pic[0]);\r\n\r\n    const tflite::Model *model = tflite::GetModel(mnist_tflite);\r\n    if (model->version() != TFLITE_SCHEMA_VERSION)\r\n    {\r\n        MicroPrintf("Model provided is schema version %d not equal to supported "\r\n                    "version %d.",\r\n                    model->version(), TFLITE_SCHEMA_VERSION);\r\n        return;\r\n    }\r\n\r\n    static tflite::MicroMutableOpResolver<5> resolver;\r\n    //\u8fd9\u91cc\u9700\u8981\u6dfb\u52a0\u6211\u4eec\u6a21\u578b\u4f7f\u7528\u7684\u5c42\r\n    if (resolver.AddReshape() != kTfLiteOk)\r\n    {\r\n        ESP_LOGI(TAG, "Add reshape failed");\r\n        return;\r\n    }\r\n\r\n    if (resolver.AddConv2D() != kTfLiteOk)\r\n    {\r\n        ESP_LOGI(TAG, "Add reshape failed");\r\n        return;\r\n    }\r\n\r\n    if (resolver.AddMaxPool2D() != kTfLiteOk)\r\n    {\r\n        ESP_LOGI(TAG, "Add reshape failed");\r\n        return;\r\n    }\r\n\r\n    if (resolver.AddFullyConnected() != kTfLiteOk)\r\n    {\r\n        ESP_LOGI(TAG, "Add reshape failed");\r\n        return;\r\n    }\r\n\r\n    if (resolver.AddSoftmax() != kTfLiteOk)\r\n    {\r\n        ESP_LOGI(TAG, "Add reshape failed");\r\n        return;\r\n    }\r\n\r\n    // Create interpreter\r\n    static tflite::MicroInterpreter static_interpreter(model, resolver, tensor_arena, kTensorArenaSize);\r\n    interpreter = &static_interpreter;\r\n\r\n    // Allocate memory for model tensor\r\n    TfLiteStatus allocate_status = interpreter->AllocateTensors();\r\n    if (allocate_status != kTfLiteOk)\r\n    {\r\n        MicroPrintf("AllocateTensors() failed");\r\n        return;\r\n    }\r\n\r\n    input = interpreter->input(0);\r\n    output = interpreter->output(0);\r\n\r\n    while (1)\r\n    {\r\n        for (int i = 0; i < pic_size; i++)\r\n        {\r\n            input->data.f[i] = pic[i];\r\n        }\r\n        \r\n        TfLiteStatus invoke_status = interpreter->Invoke();\r\n        if (invoke_status != kTfLiteOk)\r\n        {\r\n            MicroPrintf("Invoke failed on");\r\n            return;\r\n        }\r\n\r\n        for (int i = 0; i < 10; i++)\r\n        {\r\n            printf("%.2f ", output->data.f[i]);\r\n        }\r\n        printf("\\n");\r\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"\u5176\u4e2d\uff0c\u53ef\u4ee5\u5c06\u56fe\u7247\u8f6c\u6362\u4e3a\u6570\u7ec4\uff0c\u6dfb\u52a0\u5230\u5de5\u7a0b\u4e2d\u7528\u4e8e\u6a21\u578b\u63a8\u7406"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"import numpy as np\r\nimport matplotlib.pyplot as plt\r\ntest = test_x[10]\r\n\r\nfig = plt.figure\r\nplt.imshow(test, cmap='gray')\r\nplt.show()\r\n\r\nprint(test_y[10])\r\ntest = test.reshape(-1,28,28,1)\r\nprint(np.argmax(model.predict(test)))\r\n\r\n\r\ntest_1 = test.reshape(28,28)\r\narray = test_1.flatten()\r\nprint(array.shape)\r\nresult_string = \",\".join(map(str, array))\r\nprint(result_string)\n"})}),"\n",(0,t.jsx)(r.h3,{id:"\u9879\u76ee\u4ee3\u7801",children:"\u9879\u76ee\u4ee3\u7801"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(2818).A+"",children:"mnist"})})]})}function p(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},2818:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/files/mnist-4ccb7d244f687a8d8fe07007ba87ceb2.ipynb"},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>l});var t=n(6540);const i={},s=t.createContext(i);function a(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);