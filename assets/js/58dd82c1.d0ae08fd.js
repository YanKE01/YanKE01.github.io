"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6390],{3059:(t,_,r)=>{r.r(_),r.d(_,{assets:()=>d,contentTitle:()=>e,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var n=r(4848),i=r(8453);const s={},e="05 \u9a71\u52a8ST7701S RGB\u5c4f\u5e55",a={id:"linux/\u5168\u5fd7T113/ST7701S",title:"05 \u9a71\u52a8ST7701S RGB\u5c4f\u5e55",description:"1.\u6dfb\u52a0\u9a71\u52a8\u6e90\u7801",source:"@site/docs/linux/\u5168\u5fd7T113/05_ST7701S.md",sourceDirName:"linux/\u5168\u5fd7T113",slug:"/linux/\u5168\u5fd7T113/ST7701S",permalink:"/docs/linux/\u5168\u5fd7T113/ST7701S",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/linux/\u5168\u5fd7T113/05_ST7701S.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"04 \u65b0\u5efa\u677f\u7ea7\u652f\u6301\u5305",permalink:"/docs/linux/\u5168\u5fd7T113/\u677f\u7ea7\u652f\u6301\u5305"},next:{title:"06 \u65e0\u7ebf\u7f51\u5361 RTL8723BS",permalink:"/docs/linux/\u5168\u5fd7T113/rtl8723bs"}},d={},l=[{value:"1.\u6dfb\u52a0\u9a71\u52a8\u6e90\u7801",id:"1\u6dfb\u52a0\u9a71\u52a8\u6e90\u7801",level:2},{value:"2.\u914d\u7f6ekconfig\u548cMakefile",id:"2\u914d\u7f6ekconfig\u548cmakefile",level:2},{value:"2.1 kconfig",id:"21-kconfig",level:3},{value:"2.2 Makefile",id:"22-makefile",level:3},{value:"2.3 built-in.a",id:"23-built-ina",level:3},{value:"3.\u4fee\u6539panels.c\u548cpanels.h",id:"3\u4fee\u6539panelsc\u548cpanelsh",level:2},{value:"4.\u4fee\u6539dts",id:"4\u4fee\u6539dts",level:2},{value:"5.\u6d4b\u8bd5",id:"5\u6d4b\u8bd5",level:2},{value:"6.\u9a71\u52a8\u6587\u4ef6",id:"6\u9a71\u52a8\u6587\u4ef6",level:2}];function p(t){const _={code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,i.R)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(_.h1,{id:"05-\u9a71\u52a8st7701s-rgb\u5c4f\u5e55",children:"05 \u9a71\u52a8ST7701S RGB\u5c4f\u5e55"}),"\n",(0,n.jsx)(_.h1,{id:"\u6dfb\u52a0\u5c4f\u5e55\u9a71\u52a8\u6d41\u7a0b",children:"\u6dfb\u52a0\u5c4f\u5e55\u9a71\u52a8\u6d41\u7a0b"}),"\n",(0,n.jsx)(_.h2,{id:"1\u6dfb\u52a0\u9a71\u52a8\u6e90\u7801",children:"1.\u6dfb\u52a0\u9a71\u52a8\u6e90\u7801"}),"\n",(0,n.jsx)(_.p,{children:"\u5982\u679c\u8981\u6dfb\u52a0lcd\u9a71\u52a8\uff0c\u6dfb\u52a0\u4f4d\u7f6e\u5982\u4e0b\uff1a"}),"\n",(0,n.jsx)(_.pre,{children:(0,n.jsx)(_.code,{className:"language-shell",children:"/home/ubuntu/Tina-Linux/lichee/linux-5.4/drivers/video/fbdev/sunxi/disp2\n"})}),"\n",(0,n.jsx)(_.h2,{id:"2\u914d\u7f6ekconfig\u548cmakefile",children:"2.\u914d\u7f6ekconfig\u548cMakefile"}),"\n",(0,n.jsx)(_.p,{children:"\u540c\u65f6\u914d\u7f6e\u76ee\u5f55\u4e0b\u7684Kconfig\u4e0eMakefile\uff0c\u6587\u4ef6\u8def\u5f84\u5206\u522b\u5982\u4e0b\uff1a"}),"\n",(0,n.jsx)(_.pre,{children:(0,n.jsx)(_.code,{className:"language-shell",children:"/home/ubuntu/Tina-Linux/lichee/linux-5.4/drivers/video/fbdev/sunxi/disp2/disp/lcd/Kconfig\r\n/home/ubuntu/Tina-Linux/lichee/linux-5.4/drivers/video/fbdev/sunxi/disp2/disp/Makefile\n"})}),"\n",(0,n.jsx)(_.h3,{id:"21-kconfig",children:"2.1 kconfig"}),"\n",(0,n.jsx)(_.pre,{children:(0,n.jsx)(_.code,{className:"language-txt",children:'config LCD_SUPPORT_ST7701_86\r\n        bool "LCD support ST7701_86 panel"\r\n        default y\r\n        ---help---\r\n                If you want to support ST7701_86 panel for display driver, select it.\n'})}),"\n",(0,n.jsx)(_.p,{children:(0,n.jsx)(_.img,{src:r(6324).A+"",width:"1383",height:"709"})}),"\n",(0,n.jsx)(_.h3,{id:"22-makefile",children:"2.2 Makefile"}),"\n",(0,n.jsx)(_.pre,{children:(0,n.jsx)(_.code,{className:"language-txt",children:"disp-$(CONFIG_LCD_SUPPORT_ST7701_86) += lcd/st7701_86.o\n"})}),"\n",(0,n.jsx)(_.p,{children:(0,n.jsx)(_.img,{src:r(2197).A+"",width:"1183",height:"694"})}),"\n",(0,n.jsx)(_.h3,{id:"23-built-ina",children:"2.3 built-in.a"}),"\n",(0,n.jsx)(_.p,{children:"\u8fd9\u4e2a\u6587\u4ef6\u9700\u8981\u6dfb\u52a0\u6211\u4eec\u521a\u624d\u7f16\u8bd1\u5b8c\u7684.o\u6587\u4ef6"}),"\n",(0,n.jsx)(_.pre,{children:(0,n.jsx)(_.code,{className:"language-shell",children:"lcd/st7701_86.o/\n"})}),"\n",(0,n.jsx)(_.p,{children:(0,n.jsx)(_.img,{src:r(2401).A+"",width:"1099",height:"789"})}),"\n",(0,n.jsx)(_.h2,{id:"3\u4fee\u6539panelsc\u548cpanelsh",children:"3.\u4fee\u6539panels.c\u548cpanels.h"}),"\n",(0,n.jsx)(_.pre,{children:(0,n.jsx)(_.code,{className:"language-shell",children:"/home/ubuntu/Tina-Linux/lichee/linux-5.4/drivers/video/fbdev/sunxi/disp2/disp/lcd/panels.c\r\n/home/ubuntu/Tina-Linux/lichee/linux-5.4/drivers/video/fbdev/sunxi/disp2/disp/lcd/panels.h\n"})}),"\n",(0,n.jsx)(_.pre,{children:(0,n.jsx)(_.code,{className:"language-C",children:"#ifdef CONFIG_LCD_SUPPORT_ST7701_86\r\nextern struct __lcd_panel st7701_86_panel;\r\n#endif\n"})}),"\n",(0,n.jsx)(_.p,{children:(0,n.jsx)(_.img,{src:r(2517).A+"",width:"694",height:"645"})}),"\n",(0,n.jsx)(_.p,{children:(0,n.jsx)(_.img,{src:r(678).A+"",width:"1006",height:"537"})}),"\n",(0,n.jsx)(_.h2,{id:"4\u4fee\u6539dts",children:"4.\u4fee\u6539dts"}),"\n",(0,n.jsx)(_.pre,{children:(0,n.jsx)(_.code,{className:"language-dts",children:'&lcd0 {\r\n/* part 1 */\r\n\tlcd_used            = <1>;\r\n\tlcd_driver_name     = "st7701_86";\r\n\tlcd_backlight\t    = <255>;\r\n\r\n\t/* part 2 */\r\n\tlcd_if = <0>;\r\n\tlcd_hv_if = <0>;\r\n\t\r\n\t/* part 3 */\r\n\tlcd_x               = <480>;\r\n\tlcd_y               = <480>;\r\n\tlcd_width           = <71>;\r\n\tlcd_height          = <71>;\r\n\tlcd_dclk_freq       = <16>;\r\n\r\n\tlcd_hbp             = <20>;\r\n\tlcd_ht              = <526>;\r\n\tlcd_hspw            = <6>;\r\n\r\n\tlcd_vbp             = <10>;\r\n\tlcd_vt              = <510>;\r\n\tlcd_vspw            = <4>;\r\n\t\t\r\n\tlcd_pwm_used        = <1>;\r\n\tlcd_pwm_ch          = <7>;\r\n\tlcd_pwm_freq        = <5000>;\r\n\tlcd_pwm_pol         = <0>;\r\n\r\n\t/* part 5 */\r\n\tlcd_frm = <1>;\r\n\tlcd_io_phase = <0x0000>;\r\n\tlcd_gamma_en = <0>;\r\n\tlcd_cmap_en = <0>;\r\n\tlcd_hv_clk_phase = <0>;\r\n\tlcd_hv_sync_polarity= <0>;\r\n\r\n\t// reset\r\n\tlcd_gpio_0 = <&pio PB 4 GPIO_ACTIVE_HIGH>;\r\n\t// cs\r\n\tlcd_gpio_1 = <&pio PB 7 GPIO_ACTIVE_HIGH>;\r\n\t// sda\r\n\tlcd_gpio_2 = <&pio PB 5 GPIO_ACTIVE_HIGH>;\r\n\t// sck\r\n\tlcd_gpio_3 = <&pio PB 6 GPIO_ACTIVE_HIGH>;\r\n\r\n\t//bl\r\n\tlcd_bl_en = <&pio PD 22 GPIO_ACTIVE_HIGH>;\r\n\r\n\t/* part 6 */\r\n\tlcd_power = "vcc-lcd";\r\n\tlcd_pin_power = "vcc-pd";\r\n\tpinctrl-0 = <&rgb18_pins_a>;\r\n\tpinctrl-1 = <&rgb18_pins_b>;\r\n};\n'})}),"\n",(0,n.jsx)(_.pre,{children:(0,n.jsx)(_.code,{className:"language-dts",children:"&disp {\r\n\tdisp_init_enable         = <1>;\r\n\tdisp_mode                = <0>;\r\n\r\n\tscreen0_output_type      = <1>;\r\n\tscreen0_output_mode      = <4>;\r\n\r\n\tscreen1_output_type      = <3>;\r\n\tscreen1_output_mode      = <10>;\r\n\r\n\tscreen1_output_format    = <0>;\r\n\tscreen1_output_bits      = <0>;\r\n\tscreen1_output_eotf      = <4>;\r\n\tscreen1_output_cs        = <257>;\r\n\tscreen1_output_dvi_hdmi  = <2>;\r\n\tscreen1_output_range     = <2>;\r\n\tscreen1_output_scan      = <0>;\r\n\tscreen1_output_aspect_ratio = <8>;\r\n\r\n\tdev0_output_type         = <1>;\r\n\tdev0_output_mode         = <4>;\r\n\tdev0_screen_id           = <0>;\r\n\tdev0_do_hpd              = <0>;\r\n\r\n\tdev1_output_type         = <4>;\r\n\tdev1_output_mode         = <10>;\r\n\tdev1_screen_id           = <1>;\r\n\tdev1_do_hpd              = <1>;\r\n\r\n\tdef_output_dev           = <0>;\r\n\thdmi_mode_check          = <1>;\r\n\r\n\tfb0_format               = <0>;\r\n\tfb0_width                = <0>;\r\n\tfb0_height               = <0>;\r\n\r\n\tfb1_format               = <0>;\r\n\tfb1_width                = <0>;\r\n\tfb1_height               = <0>;\r\n\tchn_cfg_mode             = <1>;\r\n\r\n\tdisp_para_zone           = <1>;\r\n\t/*VCC-LCD*/\r\n/*\tdc1sw-supply = <&reg_pio3_3>;*/\r\n\t/*VCC-DSI*/\r\n/*\teldo3-supply = <&reg_eldo3>;*/\r\n\t/*VCC-PD*/\r\n/*\tdcdc1-supply = <&reg_pio3_3>;*/\r\n};\n"})}),"\n",(0,n.jsx)(_.h2,{id:"5\u6d4b\u8bd5",children:"5.\u6d4b\u8bd5"}),"\n",(0,n.jsx)(_.pre,{children:(0,n.jsx)(_.code,{className:"language-shell",children:"root@TinaLinux:/# cat /dev/urandom > /dev/fb0\r\nroot@TinaLinux:/# echo 8 > /sys/class/disp/disp/attr/colorbar\n"})}),"\n",(0,n.jsx)(_.p,{children:(0,n.jsx)(_.img,{src:r(3264).A+"",width:"1080",height:"1920"})}),"\n",(0,n.jsx)(_.h2,{id:"6\u9a71\u52a8\u6587\u4ef6",children:"6.\u9a71\u52a8\u6587\u4ef6"}),"\n",(0,n.jsx)(_.p,{children:"\u9a71\u52a8\u6587\u4ef6\u53c2\u8003\u7e41\u82b1cloud\u63d0\u4f9b\u7684sdk"}),"\n",(0,n.jsx)(_.p,{children:"st7701_86.c"}),"\n",(0,n.jsx)(_.pre,{children:(0,n.jsx)(_.code,{className:"language-c",children:'/*\r\n * drivers/video/fbdev/sunxi/disp2/disp/lcd/st7701_86/st7701_86.c\r\n *\r\n * Copyright (c) 2007-2018 Allwinnertech Co., Ltd.\r\n * Author: zhengxiaobin <zhengxiaobin@allwinnertech.com>\r\n *\r\n * This software is licensed under the terms of the GNU General Public\r\n * License version 2, as published by the Free Software Foundation, and\r\n * may be copied, distributed, and modified under those terms.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n[lcd0]\r\nlcd_used            = 1\r\nlcd_driver_name     = "st7701_86"\r\nlcd_x               = 480\r\nlcd_y               = 480\r\nlcd_width           = 71\r\nlcd_height          = 71\r\nlcd_dclk_freq       = 30\r\nlcd_pwm_used        = 1\r\nlcd_pwm_ch          = 8\r\nlcd_pwm_freq        = 50000\r\nlcd_pwm_pol         = 0\r\nlcd_pwm_max_limit   = 255\r\nlcd_hbp             = 120\r\n;10 + 20 + 10 + 240*3 = 760  real set 1000\r\nlcd_ht              = 850\r\nlcd_hspw            = 2\r\nlcd_vbp             = 13\r\nlcd_vt              = 373\r\nlcd_vspw            = 2\r\nlcd_frm             = 1\r\nlcd_if              = 0\r\nlcd_hv_if\t\t\t= 8\r\nlcd_hv_clk_phase    = 0\r\nlcd_hv_sync_polarity   = 0\r\nlcd_hv_srgb_seq\t\t= 0\r\nlcd_io_phase        = 0x0000\r\nlcd_gamma_en        = 0\r\nlcd_bright_curve_en = 1\r\nlcd_cmap_en         = 0\r\nlcd_rb_swap\t= 0\r\ndeu_mode            = 0\r\nlcdgamma4iep        = 22\r\nsmart_color         = 90\r\n;lcd_bl_en           = port:PB03<1><0><default><1>\r\nlcd_power           = "vcc-lcd"\r\nlcd_pin_power           = "vcc-pd"\r\n;reset\r\nlcd_gpio_0          = port:PD09<1><0><default><1>\r\n;cs\r\nlcd_gpio_1          = port:PD10<1><0><default><0>\r\n;sda\r\nlcd_gpio_2          = port:PD13<1><0><default><0>\r\n;sck\r\nlcd_gpio_3          = port:PD12<1><0><default><0>\r\nlcdd5                = port:PD03<2><0><2><default>\r\nlcdd6                = port:PD04<2><0><2><default>\r\nlcdd7                = port:PD05<2><0><2><default>\r\nlcdd10               = port:PD06<2><0><2><default>\r\nlcdd11               = port:PD07<2><0><2><default>\r\nlcdd12               = port:PD08<2><0><2><default>\r\nlcdclk              = port:PD18<2><0><3><default>\r\nlcdde               = port:PD19<2><0><3><default>\r\nlcdhsync            = port:PD20<2><0><3><default>\r\nlcdvsync            = port:PD21<2><0><3><default>\r\n[lcd0_suspend]\r\nlcdd5                = port:PD03<7><0><2><default>\r\nlcdd6                = port:PD04<7><0><2><default>\r\nlcdd7                = port:PD05<7><0><2><default>\r\nlcdd10               = port:PD06<7><0><2><default>\r\nlcdd11               = port:PD07<7><0><2><default>\r\nlcdd12               = port:PD08<7><0><2><default>\r\nlcdclk              = port:PD18<7><0><3><default>\r\nlcdde               = port:PD19<7><0><3><default>\r\nlcdhsync            = port:PD20<7><0><3><default>\r\nlcdvsync            = port:PD21<7><0><3><default>\r\n */\r\n#include "st7701_86.h"\r\n\r\n#define spi_scl_1 sunxi_lcd_gpio_set_value(0, 3, 1)\r\n#define spi_scl_0 sunxi_lcd_gpio_set_value(0, 3, 0)\r\n#define spi_sdi_1 sunxi_lcd_gpio_set_value(0, 2, 1)\r\n#define spi_sdi_0 sunxi_lcd_gpio_set_value(0, 2, 0)\r\n#define spi_cs_1 sunxi_lcd_gpio_set_value(0, 1, 1)\r\n#define spi_cs_0 sunxi_lcd_gpio_set_value(0, 1, 0)\r\n\r\nstatic void lcd_panel_st7701_86_init(void);\r\nstatic void LCD_power_on(u32 sel);\r\nstatic void LCD_power_off(u32 sel);\r\nstatic void LCD_bl_open(u32 sel);\r\nstatic void LCD_bl_close(u32 sel);\r\n\r\nstatic void LCD_panel_init(u32 sel);\r\nstatic void LCD_panel_exit(u32 sel);\r\n\r\nstatic void LCD_cfg_panel_info(struct panel_extend_para *info)\r\n{\r\n\tu32 i = 0, j = 0;\r\n\tu32 items;\r\n\tu8 lcd_gamma_tbl[][2] = {\r\n\t    /* {input value, corrected value} */\r\n\t    {0, 0},     {15, 15},   {30, 30},   {45, 45},   {60, 60},\r\n\t    {75, 75},   {90, 90},   {105, 105}, {120, 120}, {135, 135},\r\n\t    {150, 150}, {165, 165}, {180, 180}, {195, 195}, {210, 210},\r\n\t    {225, 225}, {240, 240}, {255, 255},\r\n\t};\r\n\r\n\tu32 lcd_cmap_tbl[2][3][4] = {\r\n\t    {\r\n\t\t{LCD_CMAP_G0, LCD_CMAP_B1, LCD_CMAP_G2, LCD_CMAP_B3},\r\n\t\t{LCD_CMAP_B0, LCD_CMAP_R1, LCD_CMAP_B2, LCD_CMAP_R3},\r\n\t\t{LCD_CMAP_R0, LCD_CMAP_G1, LCD_CMAP_R2, LCD_CMAP_G3},\r\n\t    },\r\n\t    {\r\n\t\t{LCD_CMAP_B3, LCD_CMAP_G2, LCD_CMAP_B1, LCD_CMAP_G0},\r\n\t\t{LCD_CMAP_R3, LCD_CMAP_B2, LCD_CMAP_R1, LCD_CMAP_B0},\r\n\t\t{LCD_CMAP_G3, LCD_CMAP_R2, LCD_CMAP_G1, LCD_CMAP_R0},\r\n\t    },\r\n\t};\r\n\r\n\titems = sizeof(lcd_gamma_tbl) / 2;\r\n\tfor (i = 0; i < items - 1; i++) {\r\n\t\tu32 num = lcd_gamma_tbl[i + 1][0] - lcd_gamma_tbl[i][0];\r\n\r\n\t\tfor (j = 0; j < num; j++) {\r\n\t\t\tu32 value = 0;\r\n\r\n\t\t\tvalue =\r\n\t\t\t    lcd_gamma_tbl[i][1] +\r\n\t\t\t    ((lcd_gamma_tbl[i + 1][1] - lcd_gamma_tbl[i][1]) *\r\n\t\t\t     j) /\r\n\t\t\t\tnum;\r\n\t\t\tinfo->lcd_gamma_tbl[lcd_gamma_tbl[i][0] + j] =\r\n\t\t\t    (value << 16) + (value << 8) + value;\r\n\t\t}\r\n\t}\r\n\tinfo->lcd_gamma_tbl[255] = (lcd_gamma_tbl[items - 1][1] << 16) +\r\n\t\t\t\t   (lcd_gamma_tbl[items - 1][1] << 8) +\r\n\t\t\t\t   lcd_gamma_tbl[items - 1][1];\r\n\r\n\tmemcpy(info->lcd_cmap_tbl, lcd_cmap_tbl, sizeof(lcd_cmap_tbl));\r\n}\r\n\r\nstatic s32 LCD_open_flow(u32 sel)\r\n{\r\n\t/* open lcd power, and delay 50ms */\r\n\tLCD_OPEN_FUNC(sel, LCD_power_on, 200);\r\n\t/* open lcd power, than delay 200ms */\r\n\tLCD_OPEN_FUNC(sel, LCD_panel_init, 200);\r\n\t/* open lcd controller, and delay 100ms */\r\n\tLCD_OPEN_FUNC(sel, sunxi_lcd_tcon_enable, 150);\r\n\t/* open lcd backlight, and delay 0ms */\r\n\tLCD_OPEN_FUNC(sel, LCD_bl_open, 0);\r\n\r\n\treturn 0;\r\n}\r\n\r\nstatic s32 LCD_close_flow(u32 sel)\r\n{\r\n\t/* close lcd backlight, and delay 0ms */\r\n\tLCD_CLOSE_FUNC(sel, LCD_bl_close, 50);\r\n\t/* close lcd controller, and delay 0ms */\r\n\tLCD_CLOSE_FUNC(sel, sunxi_lcd_tcon_disable, 10);\r\n\t/* open lcd power, than delay 200ms */\r\n\tLCD_CLOSE_FUNC(sel, LCD_panel_exit, 10);\r\n\t/* close lcd power, and delay 500ms */\r\n\tLCD_CLOSE_FUNC(sel, LCD_power_off, 10);\r\n\r\n\treturn 0;\r\n}\r\n\r\nstatic void LCD_power_on(u32 sel)\r\n{\r\n\t/* config lcd_power pin to open lcd power0 */\r\n\tsunxi_lcd_power_enable(sel, 0);\r\n\t/* pwr_en, active low */\r\n\tsunxi_lcd_gpio_set_value(sel, 3, 0);\r\n\tsunxi_lcd_pin_cfg(sel, 1);\r\n}\r\n\r\nstatic void LCD_power_off(u32 sel)\r\n{\r\n\tsunxi_lcd_pin_cfg(sel, 0);\r\n\t/* pwr_en, active low */\r\n\tsunxi_lcd_gpio_set_value(sel, 3, 1);\r\n\t/* config lcd_power pin to close lcd power0 */\r\n\tsunxi_lcd_power_disable(sel, 0);\r\n}\r\n\r\nstatic void LCD_bl_open(u32 sel)\r\n{\r\n\tsunxi_lcd_pwm_enable(sel);\r\n\t/* config lcd_bl_en pin to open lcd backlight */\r\n\tsunxi_lcd_backlight_enable(sel);\r\n}\r\n\r\nstatic void LCD_bl_close(u32 sel)\r\n{\r\n\t/* config lcd_bl_en pin to close lcd backlight */\r\n\tsunxi_lcd_backlight_disable(sel);\r\n\tsunxi_lcd_pwm_disable(sel);\r\n}\r\n\r\nstatic void st7701_86_spi_write_cmd(u8 value)\r\n{\r\n\r\n    int i;\r\n    spi_cs_0;\r\n    spi_sdi_0;\r\n    spi_scl_0;\r\n    sunxi_lcd_delay_us(10);\r\n    spi_scl_1;\r\n    for (i = 0; i < 8; i++) {\r\n        sunxi_lcd_delay_us(10);\r\n        if (value & 0x80)\r\n            spi_sdi_1;\r\n        else\r\n            spi_sdi_0;\r\n        spi_scl_0;\r\n        sunxi_lcd_delay_us(10);\r\n        spi_scl_1;\r\n        value <<= 1;\r\n    }\r\n    sunxi_lcd_delay_us(10);\r\n    spi_cs_1;\r\n}\r\n\r\nstatic void st7701_86_spi_write_data(u8 value)\r\n{\r\n\r\n    int i;\r\n    spi_cs_0;\r\n    spi_sdi_1;\r\n    spi_scl_0;\r\n    sunxi_lcd_delay_us(10);\r\n    spi_scl_1;\r\n    for (i = 0; i < 8; i++) {\r\n        sunxi_lcd_delay_us(10);\r\n        if (value & 0x80)\r\n            spi_sdi_1;\r\n        else\r\n            spi_sdi_0;\r\n        value <<= 1;\r\n        sunxi_lcd_delay_us(10);\r\n        spi_scl_0;\r\n        spi_scl_1;\r\n    }\r\n    sunxi_lcd_delay_us(10);\r\n    spi_cs_1;\r\n}\r\n\r\nstatic void LCD_panel_init(u32 sel)\r\n{\r\n\tstruct disp_panel_para *info =\r\n\t    kmalloc(sizeof(struct disp_panel_para), GFP_KERNEL | __GFP_ZERO);\r\n\tbsp_disp_get_panel_info(sel, info);\r\n\tlcd_panel_st7701_86_init();\r\n\tkfree(info);\r\n\treturn;\r\n}\r\n\r\nstatic void LCD_panel_exit(u32 sel)\r\n{\r\n\tstruct disp_panel_para *info =\r\n\t    kmalloc(sizeof(struct disp_panel_para), GFP_KERNEL | __GFP_ZERO);\r\n\tst7701_86_spi_write_cmd(0x28);\r\n\tst7701_86_spi_write_cmd(0x10);\r\n\tsunxi_lcd_delay_ms(300);\r\n\tbsp_disp_get_panel_info(sel, info);\r\n\tkfree(info);\r\n\treturn;\r\n}\r\n\r\nstatic void lcd_panel_st7701_86_init(void)\r\n{\r\n\t/* VCI=3.3V */\r\n\t/************* Reset LCD Driver ****************/\r\n\tspi_cs_0;\r\n\tsunxi_lcd_gpio_set_value(0, 0, 1);\r\n\tsunxi_lcd_delay_ms(50);\r\n\tsunxi_lcd_gpio_set_value(0, 0, 0);\r\n\t/* Delay 10ms, This delay time is necessary */\r\n\tsunxi_lcd_delay_ms(100);\r\n\tsunxi_lcd_gpio_set_value(0, 0, 1);\r\n\t/* Delay 120 ms */\r\n\tsunxi_lcd_delay_ms(150);\r\n\r\n\t/******************************************************************************/\r\n\tst7701_86_spi_write_cmd(0xFF);\r\n\tst7701_86_spi_write_data(0x77);\r\n\tst7701_86_spi_write_data(0x01);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x13);\r\n\tst7701_86_spi_write_cmd(0xEF);\r\n\tst7701_86_spi_write_data(0x08);\r\n\tst7701_86_spi_write_cmd(0xFF);\r\n\tst7701_86_spi_write_data(0x77);\r\n\tst7701_86_spi_write_data(0x01);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x10);\r\n\tst7701_86_spi_write_cmd(0xC0);\r\n\tst7701_86_spi_write_data(0x3B);\r\n\tst7701_86_spi_write_data(0x00);\r\n\r\n\tst7701_86_spi_write_cmd(0xC1);\r\n\tst7701_86_spi_write_data(0x0D);\r\n\tst7701_86_spi_write_data(0x02);\r\n\r\n\tst7701_86_spi_write_cmd(0xC2);\r\n\tst7701_86_spi_write_data(0x21);\r\n\tst7701_86_spi_write_data(0x08);\r\n\r\n\tst7701_86_spi_write_cmd(\r\n\t\t0xC3); //\u914d\u7f6e\u5de5\u4f5c\u6a21\u5f0f\u4e3aDE\u6a21\u5f0f\uff0c\u4f9b\u5e94\u5546\u7ed9\u7684\u9a71\u52a8\u6e90\u7801\u5e76\u6ca1\u6709\u8bbe\u7f6e\u8be5 \u5730\u5740 \u3002\r\n\tst7701_86_spi_write_data(\r\n\t\t0x02); // 0X02 The data is input on the negative edge of DOTCLK\r\n\tst7701_86_spi_write_data(0x02);\r\n\tst7701_86_spi_write_data(0x00);\r\n\r\n\tst7701_86_spi_write_cmd(0xCD);\r\n\tst7701_86_spi_write_data(\r\n\t\t0x08); //18-bit/pixel: MDT=0:D[21:16]=R,D[13:8]=G,D[5:0]=B(CDH=00) ;\r\n\r\n\t//              MDT=1:D[17:12]=R,D[11:6]=G,D[5:0]=B(CDH=08) ;\r\n\r\n\tst7701_86_spi_write_cmd(0xB0);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x11);\r\n\tst7701_86_spi_write_data(0x18);\r\n\tst7701_86_spi_write_data(0x0E);\r\n\tst7701_86_spi_write_data(0x11);\r\n\tst7701_86_spi_write_data(0x06);\r\n\tst7701_86_spi_write_data(0x07);\r\n\tst7701_86_spi_write_data(0x08);\r\n\tst7701_86_spi_write_data(0x07);\r\n\tst7701_86_spi_write_data(0x22);\r\n\tst7701_86_spi_write_data(0x04);\r\n\tst7701_86_spi_write_data(0x12);\r\n\tst7701_86_spi_write_data(0x0F);\r\n\tst7701_86_spi_write_data(0xAA);\r\n\tst7701_86_spi_write_data(0x31);\r\n\tst7701_86_spi_write_data(0x18);\r\n\tst7701_86_spi_write_cmd(0xB1);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x11);\r\n\tst7701_86_spi_write_data(0x19);\r\n\tst7701_86_spi_write_data(0x0E);\r\n\tst7701_86_spi_write_data(0x12);\r\n\tst7701_86_spi_write_data(0x07);\r\n\tst7701_86_spi_write_data(0x08);\r\n\tst7701_86_spi_write_data(0x08);\r\n\tst7701_86_spi_write_data(0x08);\r\n\tst7701_86_spi_write_data(0x22);\r\n\tst7701_86_spi_write_data(0x04);\r\n\tst7701_86_spi_write_data(0x11);\r\n\tst7701_86_spi_write_data(0x11);\r\n\tst7701_86_spi_write_data(0xA9);\r\n\tst7701_86_spi_write_data(0x32);\r\n\tst7701_86_spi_write_data(0x18);\r\n\tst7701_86_spi_write_cmd(0xFF);\r\n\tst7701_86_spi_write_data(0x77);\r\n\tst7701_86_spi_write_data(0x01);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x11);\r\n\tst7701_86_spi_write_cmd(0xB0);\r\n\tst7701_86_spi_write_data(0x60);\r\n\tst7701_86_spi_write_cmd(0xB1);\r\n\tst7701_86_spi_write_data(0x30);\r\n\tst7701_86_spi_write_cmd(0xB2);\r\n\tst7701_86_spi_write_data(0x87);\r\n\tst7701_86_spi_write_cmd(0xB3);\r\n\tst7701_86_spi_write_data(0x80);\r\n\tst7701_86_spi_write_cmd(0xB5);\r\n\tst7701_86_spi_write_data(0x49);\r\n\tst7701_86_spi_write_cmd(0xB7);\r\n\tst7701_86_spi_write_data(0x85);\r\n\tst7701_86_spi_write_cmd(0xB8);\r\n\tst7701_86_spi_write_data(0x21);\r\n\tst7701_86_spi_write_cmd(0xC1);\r\n\tst7701_86_spi_write_data(0x78);\r\n\tst7701_86_spi_write_cmd(0xC2);\r\n\tst7701_86_spi_write_data(0x78);\r\n\tsunxi_lcd_delay_ms(20);\r\n\tst7701_86_spi_write_cmd(0xE0);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x1B);\r\n\tst7701_86_spi_write_data(0x02);\r\n\tst7701_86_spi_write_cmd(0xE1);\r\n\tst7701_86_spi_write_data(0x08);\r\n\tst7701_86_spi_write_data(0xA0);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x07);\r\n\tst7701_86_spi_write_data(0xA0);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x44);\r\n\tst7701_86_spi_write_data(0x44);\r\n\tst7701_86_spi_write_cmd(0xE2);\r\n\tst7701_86_spi_write_data(0x11);\r\n\tst7701_86_spi_write_data(0x11);\r\n\tst7701_86_spi_write_data(0x44);\r\n\tst7701_86_spi_write_data(0x44);\r\n\tst7701_86_spi_write_data(0xED);\r\n\tst7701_86_spi_write_data(0xA0);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0xEC);\r\n\tst7701_86_spi_write_data(0xA0);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_cmd(0xE3);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x11);\r\n\tst7701_86_spi_write_data(0x11);\r\n\tst7701_86_spi_write_cmd(0xE4);\r\n\tst7701_86_spi_write_data(0x44);\r\n\tst7701_86_spi_write_data(0x44);\r\n\tst7701_86_spi_write_cmd(0xE5);\r\n\tst7701_86_spi_write_data(0x0A);\r\n\tst7701_86_spi_write_data(0xE9);\r\n\tst7701_86_spi_write_data(0xD8);\r\n\tst7701_86_spi_write_data(0xA0);\r\n\tst7701_86_spi_write_data(0x0C);\r\n\tst7701_86_spi_write_data(0xEB);\r\n\tst7701_86_spi_write_data(0xD8);\r\n\tst7701_86_spi_write_data(0xA0);\r\n\tst7701_86_spi_write_data(0x0E);\r\n\tst7701_86_spi_write_data(0xED);\r\n\tst7701_86_spi_write_data(0xD8);\r\n\tst7701_86_spi_write_data(0xA0);\r\n\tst7701_86_spi_write_data(0x10);\r\n\tst7701_86_spi_write_data(0xEF);\r\n\tst7701_86_spi_write_data(0xD8);\r\n\tst7701_86_spi_write_data(0xA0);\r\n\tst7701_86_spi_write_cmd(0xE6);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x11);\r\n\tst7701_86_spi_write_data(0x11);\r\n\tst7701_86_spi_write_cmd(0xE7);\r\n\tst7701_86_spi_write_data(0x44);\r\n\tst7701_86_spi_write_data(0x44);\r\n\tst7701_86_spi_write_cmd(0xE8);\r\n\tst7701_86_spi_write_data(0x09);\r\n\tst7701_86_spi_write_data(0xE8);\r\n\tst7701_86_spi_write_data(0xD8);\r\n\tst7701_86_spi_write_data(0xA0);\r\n\tst7701_86_spi_write_data(0x0B);\r\n\tst7701_86_spi_write_data(0xEA);\r\n\tst7701_86_spi_write_data(0xD8);\r\n\tst7701_86_spi_write_data(0xA0);\r\n\tst7701_86_spi_write_data(0x0D);\r\n\tst7701_86_spi_write_data(0xEC);\r\n\tst7701_86_spi_write_data(0xD8);\r\n\tst7701_86_spi_write_data(0xA0);\r\n\tst7701_86_spi_write_data(0x0F);\r\n\tst7701_86_spi_write_data(0xEE);\r\n\tst7701_86_spi_write_data(0xD8);\r\n\tst7701_86_spi_write_data(0xA0);\r\n\tst7701_86_spi_write_cmd(0xEB);\r\n\tst7701_86_spi_write_data(0x02);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0xE4);\r\n\tst7701_86_spi_write_data(0xE4);\r\n\tst7701_86_spi_write_data(0x88);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x40);\r\n\tst7701_86_spi_write_cmd(0xEC);\r\n\tst7701_86_spi_write_data(0x3C);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_cmd(0xED);\r\n\tst7701_86_spi_write_data(0xAB);\r\n\tst7701_86_spi_write_data(0x89);\r\n\tst7701_86_spi_write_data(0x76);\r\n\tst7701_86_spi_write_data(0x54);\r\n\tst7701_86_spi_write_data(0x02);\r\n\tst7701_86_spi_write_data(0xFF);\r\n\tst7701_86_spi_write_data(0xFF);\r\n\tst7701_86_spi_write_data(0xFF);\r\n\tst7701_86_spi_write_data(0xFF);\r\n\tst7701_86_spi_write_data(0xFF);\r\n\tst7701_86_spi_write_data(0xFF);\r\n\tst7701_86_spi_write_data(0x20);\r\n\tst7701_86_spi_write_data(0x45);\r\n\tst7701_86_spi_write_data(0x67);\r\n\tst7701_86_spi_write_data(0x98);\r\n\tst7701_86_spi_write_data(0xBA);\r\n\tst7701_86_spi_write_cmd(0xEF);\r\n\tst7701_86_spi_write_data(0x10);\r\n\tst7701_86_spi_write_data(0x0D);\r\n\tst7701_86_spi_write_data(0x04);\r\n\tst7701_86_spi_write_data(0x08);\r\n\tst7701_86_spi_write_data(0x3F);\r\n\tst7701_86_spi_write_data(0x1F);\r\n\tst7701_86_spi_write_cmd(0xFF);\r\n\tst7701_86_spi_write_data(0x77);\r\n\tst7701_86_spi_write_data(0x01);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x00);\r\n\r\n\tst7701_86_spi_write_cmd(0x3A);\r\n\tst7701_86_spi_write_data(\r\n\t\t0x66); //55/50=16bit(RGB565);66=18bit(RGB666);77?????3AH?=24bit(RGB888)\r\n\r\n\tst7701_86_spi_write_cmd(0xFF);\r\n\tst7701_86_spi_write_data(0x77);\r\n\tst7701_86_spi_write_data(0x01);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x13);\r\n\tst7701_86_spi_write_cmd(0xE8);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x0E);\r\n\tst7701_86_spi_write_cmd(0xFF);\r\n\tst7701_86_spi_write_data(0x77);\r\n\tst7701_86_spi_write_data(0x01);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x00);\r\n\r\n\tst7701_86_spi_write_cmd(0xFF);\r\n\tst7701_86_spi_write_data(0x77);\r\n\tst7701_86_spi_write_data(0x01);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x13);\r\n\tst7701_86_spi_write_cmd(0xE8);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x0C);\r\n\tsunxi_lcd_delay_ms(10);\r\n\tst7701_86_spi_write_cmd(0xE8);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x00);\r\n\r\n\tst7701_86_spi_write_cmd(0xFF);\r\n\tst7701_86_spi_write_data(0x77);\r\n\tst7701_86_spi_write_data(0x01);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x00);\r\n\tst7701_86_spi_write_data(0x00);\r\n\r\n\tst7701_86_spi_write_cmd(0x35);\r\n\tst7701_86_spi_write_data(0x00); //TE ON\r\n\r\n\tst7701_86_spi_write_cmd(0x36);\r\n\tst7701_86_spi_write_data(0x08); //FW:00     BW:10\r\n\r\n\tst7701_86_spi_write_cmd(0x21);\r\n\r\n\t///////////////BIST////////////////\r\n\t// st7701_86_spi_write_cmd(0xFF);\r\n\t// st7701_86_spi_write_data(0x77);\r\n\t// st7701_86_spi_write_data(0x01);\r\n\t// st7701_86_spi_write_data(0x00);\r\n\t// st7701_86_spi_write_data(0x00);\r\n\t// st7701_86_spi_write_data(0x12);\r\n\t// st7701_86_spi_write_cmd(0xD1);\r\n\t// st7701_86_spi_write_data(0x81);\r\n\t// st7701_86_spi_write_cmd(0xD2);\r\n\t// st7701_86_spi_write_data(0x06);\r\n\r\n\tst7701_86_spi_write_cmd(0x11);\r\n\tsunxi_lcd_delay_ms(120);\r\n\r\n\tst7701_86_spi_write_cmd(0x29);\r\n\tsunxi_lcd_delay_ms(120);\r\n}\r\n\r\n/* sel: 0:lcd0; 1:lcd1 */\r\nstatic s32 LCD_user_defined_func(u32 sel, u32 para1, u32 para2, u32 para3)\r\n{\r\n\treturn 0;\r\n}\r\n\r\nstruct __lcd_panel st7701_86_panel = {\r\n    /* panel driver name, must mach the name of lcd_drv_name in sys_config.fex\r\n       */\r\n\t.name = "st7701_86",\r\n\t.func = {\r\n\t\t.cfg_panel_info = LCD_cfg_panel_info,\r\n\t\t.cfg_open_flow = LCD_open_flow,\r\n\t\t.cfg_close_flow = LCD_close_flow,\r\n\t\t.lcd_user_defined_func = LCD_user_defined_func,\r\n\t\t},\r\n};\r\n\n'})}),"\n",(0,n.jsx)(_.p,{children:"st7701_86.h"}),"\n",(0,n.jsx)(_.pre,{children:(0,n.jsx)(_.code,{className:"language-h",children:'/*\r\n * drivers/video/fbdev/sunxi/disp2/disp/lcd/st7789v/st7789v.h\r\n *\r\n * Copyright (c) 2007-2018 Allwinnertech Co., Ltd.\r\n * Author: zhengxiaobin <zhengxiaobin@allwinnertech.com>\r\n *\r\n * This software is licensed under the terms of the GNU General Public\r\n * License version 2, as published by the Free Software Foundation, and\r\n * may be copied, distributed, and modified under those terms.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n */\r\n#ifndef __ST7701_86_PANEL_H__\r\n#define __ST7701_86_PANEL_H__\r\n\r\n#include "panels.h"\r\n\r\nextern struct __lcd_panel st7701_86_panel;\r\n\r\n#endif\r\n\r\n\n'})})]})}function c(t={}){const{wrapper:_}={...(0,i.R)(),...t.components};return _?(0,n.jsx)(_,{...t,children:(0,n.jsx)(p,{...t})}):p(t)}},2401:(t,_,r)=>{r.d(_,{A:()=>n});const n=r.p+"assets/images/t113\u6dfb\u52a0st7701s_build-440eaf2ac476f8d7aec7e97aeccd0516.png"},6324:(t,_,r)=>{r.d(_,{A:()=>n});const n=r.p+"assets/images/t113\u6dfb\u52a0st7701s_kconfig-d1ef262c5dc1bfbcc2da94517d123c60.png"},2197:(t,_,r)=>{r.d(_,{A:()=>n});const n=r.p+"assets/images/t113\u6dfb\u52a0st7701s_makefile-4a8c4b05271d6c37038396a2f4f1ef16.png"},2517:(t,_,r)=>{r.d(_,{A:()=>n});const n=r.p+"assets/images/t113\u6dfb\u52a0st7701s_panelsc-f30fd07442444101b44b84e5ec066c41.png"},678:(t,_,r)=>{r.d(_,{A:()=>n});const n=r.p+"assets/images/t113\u6dfb\u52a0st7701s_panelsh-a4bc67f7d1151bc3e016295c1877ce52.png"},3264:(t,_,r)=>{r.d(_,{A:()=>n});const n=r.p+"assets/images/t113\u6dfb\u52a0st7701s\u6d4b\u8bd5-a739e099feedab9b9d6754e320eec4ca.jpg"},8453:(t,_,r)=>{r.d(_,{R:()=>e,x:()=>a});var n=r(6540);const i={},s=n.createContext(i);function e(t){const _=n.useContext(s);return n.useMemo((function(){return"function"==typeof t?t(_):{..._,...t}}),[_,t])}function a(t){let _;return _=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:e(t.components),n.createElement(s.Provider,{value:_},t.children)}}}]);