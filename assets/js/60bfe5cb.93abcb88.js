"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4828],{9638:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var r=n(4848),s=n(8453);const i={},o=void 0,a={id:"espressif/\u4e2a\u4eba\u5b66\u4e60/\u5916\u8bbe/BITSCRM/\u5b9e\u9a8c",title:"\u5b9e\u9a8c",description:"uint8_t\u7684\u6570\u636e\u7c7b\u578b\u9ad8\u4f4e\u4f4d\u4e92\u6362",source:"@site/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/\u5916\u8bbe/BITSCRM/\u5b9e\u9a8c.md",sourceDirName:"espressif/\u4e2a\u4eba\u5b66\u4e60/\u5916\u8bbe/BITSCRM",slug:"/espressif/\u4e2a\u4eba\u5b66\u4e60/\u5916\u8bbe/BITSCRM/\u5b9e\u9a8c",permalink:"/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/\u5916\u8bbe/BITSCRM/\u5b9e\u9a8c",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/\u5916\u8bbe/BITSCRM/\u5b9e\u9a8c.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"WAV\u683c\u5f0f",permalink:"/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/\u5916\u8bbe/AUDIO/wav_formate"},next:{title:"01\u6bd4\u7279\u5012\u88c5\u57fa\u7840\u77e5\u8bc6",permalink:"/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/\u5916\u8bbe/BITSCRM/\u6bd4\u7279\u5012\u88c5\u57fa\u7840\u77e5\u8bc6"}},c={},p=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"uint8_t\u7684\u6570\u636e\u7c7b\u578b\u9ad8\u4f4e\u4f4d\u4e92\u6362"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"# Example bitscrambler program. Reads in 8 bytes and outputs 8 bytes where\r\n# each byte's high and low nibbles (4 bits) are swapped. Specifically,\r\n# for each input byte of the form 'abcdefgh' the output byte is 'efghabcd'.\r\n\r\ncfg trailing_bytes 64            # If we have an EOF on the input, we still\r\n                                 # need to process the 64 bits in M0/M1\r\ncfg prefetch true                # We expect M0/M1 to be filled\r\ncfg lut_width_bits 8             # Not really applicable here\r\n\r\nloop:\r\n    # Note: we start with 64 bits in M0 and M1, so we can immediately start outputting.\r\n\r\n    # Swap high and low nibbles of each byte\r\n    set 0..3 4..7,       # Byte 0\r\n    set 4..7 0..3,       # Byte 0\r\n\r\n    set 8..11 12..15,    # Byte 1\r\n    set 12..15 8..11,    # Byte 1\r\n\r\n    set 16..19 20..23,   # Byte 2\r\n    set 20..23 16..19,   # Byte 2\r\n\r\n    set 24..27 28..31,   # Byte 3\r\n    set 28..31 24..27,   # Byte 3\r\n    \r\n    # Write first 32 bits\r\n    write 32\r\n\r\n    # Continue swapping high and low nibbles of each byte\r\n    set 0..3 36..39,     # Byte 4\r\n    set 4..7 32..35,     # Byte 4\r\n\r\n    set 8..11 44..47,    # Byte 5\r\n    set 12..15 40..43,   # Byte 5\r\n\r\n    set 16..19 52..55,   # Byte 6\r\n    set 20..23 48..51,   # Byte 6\r\n\r\n    set 24..27 60..63,   # Byte 7\r\n    set 28..31 56..59,   # Byte 7\r\n\r\n    # Write next 32 bits\r\n    write 32,\r\n    \r\n    # Note we can read the first half of the next 64 bits into the\r\n    # input buffer as the load happens at the end of the instruction.\r\n    read 32\r\n\r\n    # Read the 2nd half of the 64 bits in, and loop back to the start.\r\n    read 32,\r\n    jmp loop\n"})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var r=n(6540);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);