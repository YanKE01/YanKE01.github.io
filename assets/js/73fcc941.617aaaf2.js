"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9149],{5880:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>_,default:()=>f,frontMatter:()=>d,metadata:()=>c,toc:()=>l});var i=r(4848),s=r(8453);const d={},_="esp_jpeg\u7ec4\u4ef6\u89e3\u6790\u56fe\u7247",c={id:"espressif/\u4e2a\u4eba\u5b66\u4e60/IDF/st7789v_jpeg_decode",title:"esp_jpeg\u7ec4\u4ef6\u89e3\u6790\u56fe\u7247",description:"\u57fa\u4e8eesp_jpeg\u7ec4\u4ef6\u89e3\u6790sd\u5361\u4e2d\u7684jpg\u56fe\u7247",source:"@site/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/IDF/st7789v_jpeg_decode.md",sourceDirName:"espressif/\u4e2a\u4eba\u5b66\u4e60/IDF",slug:"/espressif/\u4e2a\u4eba\u5b66\u4e60/IDF/st7789v_jpeg_decode",permalink:"/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/IDF/st7789v_jpeg_decode",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/IDF/st7789v_jpeg_decode.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ST7789 and lvgl",permalink:"/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/IDF/st7789v"},next:{title:"UART \u9a71\u52a8",permalink:"/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/IDF/uart\u9a71\u52a8"}},t={},l=[{value:"1.\u6dfb\u52a0esp_jpeg\u7ec4\u4ef6\uff1a",id:"1\u6dfb\u52a0esp_jpeg\u7ec4\u4ef6",level:3},{value:"2.\u6dfb\u52a0sd\u5361\u7ec4\u4ef6",id:"2\u6dfb\u52a0sd\u5361\u7ec4\u4ef6",level:3},{value:"2.1 CMakeLists.txt",id:"21-cmakeliststxt",level:4},{value:"2.2 sd_card.c",id:"22-sd_cardc",level:4},{value:"2.3 sd_card.h",id:"23-sd_cardh",level:4},{value:"3.\u89e3\u6790jpg\u56fe\u7247",id:"3\u89e3\u6790jpg\u56fe\u7247",level:3},{value:"3.1\u5c1d\u8bd5\u83b7\u53d6\u6587\u4ef6\u5927\u5c0f",id:"31\u5c1d\u8bd5\u83b7\u53d6\u6587\u4ef6\u5927\u5c0f",level:4},{value:"3.2\u6253\u5f00\u6587\u4ef6\u5e76\u8c03\u7528esp_jpeg_decode",id:"32\u6253\u5f00\u6587\u4ef6\u5e76\u8c03\u7528esp_jpeg_decode",level:4},{value:"3.3\u7ed8\u5236",id:"33\u7ed8\u5236",level:4},{value:"3.4\u5b8c\u6574\u8c03\u7528\u4ee3\u7801",id:"34\u5b8c\u6574\u8c03\u7528\u4ee3\u7801",level:4},{value:"4.\u5de5\u7a0b\u5730\u5740",id:"4\u5de5\u7a0b\u5730\u5740",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"esp_jpeg\u7ec4\u4ef6\u89e3\u6790\u56fe\u7247",children:"esp_jpeg\u7ec4\u4ef6\u89e3\u6790\u56fe\u7247"}),"\n",(0,i.jsx)(n.p,{children:"\u57fa\u4e8eesp_jpeg\u7ec4\u4ef6\u89e3\u6790sd\u5361\u4e2d\u7684jpg\u56fe\u7247"}),"\n",(0,i.jsx)(n.p,{children:"\u5f00\u53d1\u73af\u5883\uff1a"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ESP32-S3"}),"\n",(0,i.jsx)(n.li,{children:"1.4 inch ST7789\u5c4f\u5e55"}),"\n",(0,i.jsx)(n.li,{children:"ESP IDF Master\u7248\u672c"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"1\u6dfb\u52a0esp_jpeg\u7ec4\u4ef6",children:"1.\u6dfb\u52a0esp_jpeg\u7ec4\u4ef6\uff1a"}),"\n",(0,i.jsxs)(n.p,{children:["\u7ec4\u4ef6\u5730\u5740\uff1a",(0,i.jsx)(n.a,{href:"https://components.espressif.com/components/espressif/esp_jpeg",children:"esp_jpg"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'idf.py add-dependency "espressif/esp_jpeg^1.0.5~2"\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u66f4\u65b0\u7ec4\u4ef6\u5e76\u4e14\u7f16\u8bd1"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"idf.py set-target esp32s3\r\nidf.py build\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2\u6dfb\u52a0sd\u5361\u7ec4\u4ef6",children:"2.\u6dfb\u52a0sd\u5361\u7ec4\u4ef6"}),"\n",(0,i.jsxs)(n.p,{children:["sd\u5361\u7684\u9a71\u52a8\u53ef\u4ee5\u53c2\u8003idf\u4ed3\u5e93\u4e2d\u7684example, ",(0,i.jsx)(n.a,{href:"https://github.com/espressif/esp-idf/tree/master/examples/storage/sd_card/sdmmc",children:"sd\u5361\u53c2\u8003\u9a71\u52a8"})]}),"\n",(0,i.jsx)(n.p,{children:"\u53c2\u8003\u5b98\u65b9\u9a71\u52a8\uff0c\u6dfb\u52a0sd card\u9a71\u52a8\uff0c\u6211\u7684\u7ec4\u4ef6\u76ee\u5f55\u5982\u4e0b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"\u251c\u2500\u2500 CMakeLists.txt\r\n\u251c\u2500\u2500 include\r\n\u2502   \u2514\u2500\u2500 sd_card.h\r\n\u2514\u2500\u2500 sd_card.c\n"})}),"\n",(0,i.jsx)(n.h4,{id:"21-cmakeliststxt",children:"2.1 CMakeLists.txt"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-CMAKE",children:'idf_component_register(SRCS "sd_card.c"\r\n                    INCLUDE_DIRS "include"\r\n                    REQUIRES driver fatfs)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"22-sd_cardc",children:"2.2 sd_card.c"}),"\n",(0,i.jsx)(n.p,{children:"\u6211\u8fd9\u91cc\u591a\u4e86\u4e00\u4e2a\u626b\u63cf\u66f4\u76ee\u5f55\u4e0b\u6587\u4ef6\u7684\u529f\u80fd"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\r\n#include "esp_log.h"\r\n#include "sd_card.h"\r\n#include "string.h"\r\n#include "dirent.h"\r\n\r\nstatic const char *TAG = "SD_CARD";\r\n\r\nesp_err_t sd_read_file(const char *path)\r\n{\r\n    ESP_LOGI(TAG, "Reading file %s", path);\r\n    FILE *f = fopen(path, "r");\r\n    if (f == NULL)\r\n    {\r\n        ESP_LOGE(TAG, "Failed to open file for reading");\r\n        return ESP_FAIL;\r\n    }\r\n    char line[128];\r\n    fgets(line, sizeof(line), f);\r\n    fclose(f);\r\n\r\n    // strip newline\r\n    char *pos = strchr(line, \'\\n\');\r\n    if (pos)\r\n    {\r\n        *pos = \'\\0\';\r\n    }\r\n    ESP_LOGI(TAG, "Read from file: \'%s\'", line);\r\n\r\n    return ESP_OK;\r\n}\r\n\r\nesp_err_t sd_card_init(sd_card_config_t config, char *mount_path)\r\n{\r\n    esp_err_t ret = ESP_FAIL;\r\n    esp_vfs_fat_sdmmc_mount_config_t mount_config = {\r\n        .format_if_mount_failed = false,\r\n        .allocation_unit_size = 16 * 1024,\r\n        .max_files = 5,\r\n    };\r\n\r\n    ESP_LOGI(TAG, "Initializing sd card");\r\n    sdmmc_card_t *card;\r\n    sdmmc_host_t host = SDMMC_HOST_DEFAULT();\r\n    sdmmc_slot_config_t slot_config = SDMMC_SLOT_CONFIG_DEFAULT();\r\n    slot_config.width = 4;\r\n    slot_config.clk = config.clk;\r\n    slot_config.cmd = config.cmd;\r\n    slot_config.d0 = config.d0;\r\n    slot_config.d1 = config.d1;\r\n    slot_config.d2 = config.d2;\r\n    slot_config.d3 = config.d3;\r\n    slot_config.flags |= SDMMC_SLOT_FLAG_INTERNAL_PULLUP;\r\n\r\n    ESP_LOGI(TAG, "Mount filesystem");\r\n\r\n    ret = esp_vfs_fat_sdmmc_mount(mount_path, &host, &slot_config, &mount_config, &card);\r\n\r\n    if (ret != ESP_OK)\r\n    {\r\n        return ESP_FAIL;\r\n    }\r\n    ESP_LOGI(TAG, "Filesystem mounted");\r\n    sdmmc_card_print_info(stdout, card);\r\n\r\n    /*!< scan files */\r\n    DIR *dir = opendir(mount_path);\r\n    if (!dir)\r\n    {\r\n        return ESP_FAIL;\r\n    }\r\n    struct dirent *entry;\r\n    while ((entry = readdir(dir)) != NULL)\r\n    {\r\n        ESP_LOGI(TAG, "%s has file:%s", mount_path, entry->d_name);\r\n    }\r\n    return ret;\r\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"23-sd_cardh",children:"2.3 sd_card.h"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'#pragma once\r\n\r\n#include "driver/sdmmc_host.h"\r\n#include "esp_vfs_fat.h"\r\n#include "sdmmc_cmd.h"\r\n\r\ntypedef struct\r\n{\r\n    gpio_num_t clk;\r\n    gpio_num_t d0;\r\n    gpio_num_t d1;\r\n    gpio_num_t d2;\r\n    gpio_num_t d3;\r\n    gpio_num_t cmd;\r\n} sd_card_config_t;\r\n\r\nesp_err_t sd_card_init(sd_card_config_t config, char *mount_path);\r\nesp_err_t sd_read_file(const char *path);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3\u89e3\u6790jpg\u56fe\u7247",children:"3.\u89e3\u6790jpg\u56fe\u7247"}),"\n",(0,i.jsx)(n.p,{children:"\u9996\u5148\u5c06\u56fe\u7247\u4fdd\u5b58\u5230sd\u5361\u4e2d\uff0c\u6211\u8fd9\u91cc\u7684\u6d4b\u8bd5\u56fe\u7247\u5982\u4e0b\uff0c\u5728sd\u5361\u4e2d\u7684\u547d\u540d\u4e3abilibili.jpg"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:r(2493).A+"",width:"512",height:"512"})}),"\n",(0,i.jsx)(n.p,{children:"\u4e00\u4e9b\u6587\u4ef6\u8bfb\u5199\u51fd\u6570\u5982open\uff0cread\u7b49\u9700\u8981\u6dfb\u52a0\u5982\u4e0b\u5934\u6587\u4ef6"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'#include "unistd.h"\r\n#include "sys/stat.h"\r\n#include <fcntl.h>\r\n#include <dirent.h>\n'})}),"\n",(0,i.jsx)(n.h4,{id:"31\u5c1d\u8bd5\u83b7\u53d6\u6587\u4ef6\u5927\u5c0f",children:"3.1\u5c1d\u8bd5\u83b7\u53d6\u6587\u4ef6\u5927\u5c0f"}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u4e00\u6b65\u4e3b\u8981\u662f\u83b7\u53d6\u6587\u4ef6\u5927\u5c0f"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'    struct stat st;\r\n    const char *filename = "/sdcard/bilibili.jpg";                                                            /*!< filename */\r\n    if (stat(filename, &st) == 0)\r\n    {\r\n        ESP_LOGI(TAG, "File %s size is %ld\\n", filename, st.st_size);\r\n        uint32_t filesize = (uint32_t)st.st_size;                                                             /*!< read image file size */\r\n        char *file_buf = heap_caps_malloc(filesize + 1, MALLOC_CAP_DMA);\r\n\r\n        if (file_buf == NULL)\r\n        {\r\n            return;\r\n        }\r\n    }else{\r\n        ESP_LOGI(TAG,"Read %s size fail",filename);\r\n    }\n'})}),"\n",(0,i.jsx)(n.h4,{id:"32\u6253\u5f00\u6587\u4ef6\u5e76\u8c03\u7528esp_jpeg_decode",children:"3.2\u6253\u5f00\u6587\u4ef6\u5e76\u8c03\u7528esp_jpeg_decode"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'uint8_t *file_buffer = NULL; /*!< decode image buffer */\r\nsize_t file_buffer_size = 0; /*!< decode image buffer size */\r\n\r\nint f = open(filename, O_RDONLY);\r\nif (f > 0)\r\n{\r\n    read(f, file_buf, filesize);\r\n    ESP_LOGI(TAG, "Decode jpg");\r\n    file_buffer_size = 240 * 240 * sizeof(uint16_t);\r\n    file_buffer = heap_caps_calloc(file_buffer_size, 1, MALLOC_CAP_DEFAULT);                          /*!< create out image buffer */\r\n    esp_jpeg_image_cfg_t jpeg_cfg = {\r\n        .indata = (uint8_t *)file_buf,\r\n        .indata_size = filesize,\r\n        .outbuf = file_buffer,\r\n        .outbuf_size = file_buffer_size,\r\n        .out_format = JPEG_IMAGE_FORMAT_RGB565,\r\n        .out_scale = JPEG_IMAGE_SCALE_1_4,\r\n        .flags = {\r\n            .swap_color_bytes = 1,\r\n        },\r\n    };\r\n\r\n    esp_jpeg_image_output_t outimage;\r\n    esp_jpeg_decode(&jpeg_cfg, &outimage);\r\n    ESP_LOGI(TAG, "%s size: %d x %d", filename, outimage.width, outimage.height);\r\n}\r\n\n'})}),"\n",(0,i.jsx)(n.h4,{id:"33\u7ed8\u5236",children:"3.3\u7ed8\u5236"}),"\n",(0,i.jsx)(n.p,{children:"\u8c03\u7528\u4e4b\u524d\u521d\u59cb\u5316\u7684st7789\u9a71\u52a8\u5373\u53ef"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"esp_lcd_panel_draw_bitmap(lcd_panel, 0, 0, 0 + outimage.height, 0 + outimage.width, file_buffer); /*!< Write to lcd */\n"})}),"\n",(0,i.jsx)(n.h4,{id:"34\u5b8c\u6574\u8c03\u7528\u4ee3\u7801",children:"3.4\u5b8c\u6574\u8c03\u7528\u4ee3\u7801"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'#include <stdlib.h>\r\n#include "esp_log.h"\r\n#include "freertos/FreeRTOS.h"\r\n#include "freertos/task.h"\r\n#include "driver/gpio.h"\r\n#include "esp_check.h"\r\n#include "hid_device_mouse.h"\r\n#include "hid_device_audio_ctrl.h"\r\n#include "sd_card.h"\r\n#include "st7789.h"\r\n#include "esp_lvgl_port.h"\r\n#include "ui.h"\r\n#include "unistd.h"\r\n#include "sys/stat.h"\r\n#include <fcntl.h>\r\n#include <dirent.h>\r\n#include "jpeg_decoder.h"\r\n\r\n#define APP_BUTTON (GPIO_NUM_0) // Use BOOT signal by default\r\nstatic const char *TAG = "ESP_USB_OTG";\r\nlv_disp_t *lvgl_disp = NULL;\r\n\r\nlcd_config_t lcd_config = {\r\n    .spi_host_device = SPI3_HOST,\r\n    .dc = GPIO_NUM_4,\r\n    .cs = GPIO_NUM_5,\r\n    .sclk = GPIO_NUM_6,\r\n    .mosi = GPIO_NUM_7,\r\n    .rst = GPIO_NUM_8,\r\n    .lcd_bits_per_pixel = 16,\r\n    .lcd_color_space = LCD_RGB_ELEMENT_ORDER_RGB,\r\n    .lcd_height_res = 240,\r\n    .lcd_vertical_res = 240,\r\n    .lcd_draw_buffer_height = 50,\r\n};\r\n\r\nsd_card_config_t sd_card_config = {\r\n    .clk = GPIO_NUM_36,\r\n    .cmd = GPIO_NUM_35,\r\n    .d0 = GPIO_NUM_37,\r\n    .d1 = GPIO_NUM_38,\r\n    .d2 = GPIO_NUM_33,\r\n    .d3 = GPIO_NUM_34,\r\n};\r\n\r\nuint8_t *file_buffer = NULL; /*!< decode image buffer */\r\nsize_t file_buffer_size = 0; /*!< decode image buffer size */\r\n\r\nvoid app_main(void)\r\n{\r\n    ESP_ERROR_CHECK(sd_card_init(sd_card_config, "/sdcard"));\r\n\r\n    lcd_init(lcd_config);\r\n    lcd_fullclean(lcd_panel, lcd_config, rgb565(0, 0, 0));\r\n\r\n    struct stat st;\r\n    const char *filename = "/sdcard/bilibili.jpg";                                                            /*!< filename */\r\n    if (stat(filename, &st) == 0)\r\n    {\r\n        ESP_LOGI(TAG, "File %s size is %ld\\n", filename, st.st_size);\r\n        uint32_t filesize = (uint32_t)st.st_size;                                                             /*!< read image file size */\r\n        char *file_buf = heap_caps_malloc(filesize + 1, MALLOC_CAP_DMA);\r\n\r\n        if (file_buf == NULL)\r\n        {\r\n            return;\r\n        }\r\n\r\n        int f = open(filename, O_RDONLY);\r\n        if (f > 0)\r\n        {\r\n            read(f, file_buf, filesize);\r\n            ESP_LOGI(TAG, "Decode jpg");\r\n            file_buffer_size = 240 * 240 * sizeof(uint16_t);\r\n            file_buffer = heap_caps_calloc(file_buffer_size, 1, MALLOC_CAP_DEFAULT);                          /*!< create out image buffer */\r\n            esp_jpeg_image_cfg_t jpeg_cfg = {\r\n                .indata = (uint8_t *)file_buf,\r\n                .indata_size = filesize,\r\n                .outbuf = file_buffer,\r\n                .outbuf_size = file_buffer_size,\r\n                .out_format = JPEG_IMAGE_FORMAT_RGB565,\r\n                .out_scale = JPEG_IMAGE_SCALE_1_4,\r\n                .flags = {\r\n                    .swap_color_bytes = 1,\r\n                },\r\n            };\r\n\r\n            esp_jpeg_image_output_t outimage;\r\n            esp_jpeg_decode(&jpeg_cfg, &outimage);\r\n            ESP_LOGI(TAG, "%s size: %d x %d", filename, outimage.width, outimage.height);\r\n\r\n            esp_lcd_panel_draw_bitmap(lcd_panel, 0, 0, 0 + outimage.height, 0 + outimage.width, file_buffer); /*!< Write to lcd */\r\n            free(file_buffer);\r\n            close(f);\r\n        }\r\n        else\r\n        {\r\n            ESP_LOGI(TAG, "Open %s fail", filename);\r\n        }\r\n\r\n        free(file_buf);\r\n    }\r\n    else\r\n    {\r\n        ESP_LOGI(TAG, "Read Size Fail");\r\n        return;\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:r(562).A+"",width:"2384",height:"1975"})}),"\n",(0,i.jsx)(n.h3,{id:"4\u5de5\u7a0b\u5730\u5740",children:"4.\u5de5\u7a0b\u5730\u5740"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/YanKE01/esp_usb_otg/tree/esp_jpeg_decode",children:"https://github.com/YanKE01/esp_usb_otg/tree/esp_jpeg_decode"})})]})}function f(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},2493:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/bilibili-781f2fd8ac8dd9bdce15c7aadc7f3cc4.jpg"},562:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/st7789v_show_bilibili-8a4c5a7c82086f4b355f4aca786814e3.jpg"},8453:(e,n,r)=>{r.d(n,{R:()=>_,x:()=>c});var i=r(6540);const s={},d=i.createContext(s);function _(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:_(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);