"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5004],{1475:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>c,toc:()=>o});var r=t(4848),s=t(8453);const a={},i="WAV\u683c\u5f0f",c={id:"espressif/\u4e2a\u4eba\u5b66\u4e60/\u5916\u8bbe/AUDIO/wav_formate",title:"WAV\u683c\u5f0f",description:"\u6700\u8fd1\u9700\u8981\u4fdd\u5b58wav\u683c\u5f0f\u7684\u97f3\u9891\uff0c\u5728\u6b64\u8bb0\u5f55\u4e00\u4e0b",source:"@site/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/\u5916\u8bbe/AUDIO/wav_formate.md",sourceDirName:"espressif/\u4e2a\u4eba\u5b66\u4e60/\u5916\u8bbe/AUDIO",slug:"/espressif/\u4e2a\u4eba\u5b66\u4e60/\u5916\u8bbe/AUDIO/wav_formate",permalink:"/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/\u5916\u8bbe/AUDIO/wav_formate",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/\u5916\u8bbe/AUDIO/wav_formate.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ESP_SR\u4f7f\u7528",permalink:"/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/\u5916\u8bbe/AUDIO/esp_sr"},next:{title:"\u5b9e\u9a8c",permalink:"/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/\u5916\u8bbe/BITSCRM/\u5b9e\u9a8c"}},u={},o=[{value:"RIFF\u5757",id:"riff\u5757",level:3},{value:"FMT\u5757",id:"fmt\u5757",level:3},{value:"\u6570\u636e\u5757",id:"\u6570\u636e\u5757",level:3}];function h(e){const n={code:"code",h1:"h1",h3:"h3",img:"img",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"wav\u683c\u5f0f",children:"WAV\u683c\u5f0f"}),"\n",(0,r.jsx)(n.p,{children:"\u6700\u8fd1\u9700\u8981\u4fdd\u5b58wav\u683c\u5f0f\u7684\u97f3\u9891\uff0c\u5728\u6b64\u8bb0\u5f55\u4e00\u4e0b"}),"\n",(0,r.jsx)(n.p,{children:"\u9996\u5148wav\u7684\u97f3\u9891\u683c\u5f0f\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:t(5882).A+"",width:"612",height:"567"})}),"\n",(0,r.jsx)(n.p,{children:"\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4ed6\u4e00\u5171\u6709\u4e09\u5927\u5757\uff0cRIFF\u5757\uff0cFMT\u5757\u548c\u6570\u636e\u5757"}),"\n",(0,r.jsx)(n.h3,{id:"riff\u5757",children:"RIFF\u5757"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"struct {\r\n    char chunk_id[4];  //\u5927\u5199\u5b57\u7b26\u4e32RIFF\uff0c\r\n    uint32_t chunk_size; //\u4ece\u4e0b\u4e00\u4e2a\u5b57\u6bb5\u9996\u5730\u5740\u5f00\u59cb\u5230\u6587\u4ef6\u672b\u5c3e\u7684\u603b\u5b57\u8282\u6570\u3002\u8be5\u5b57\u6bb5\u7684\u6570\u503c\u52a0 8 \u4e3a\u5f53\u524d\u6587\u4ef6\u7684\u5b9e\u9645\u957f\u5ea6\u3002\r\n    char chunk_format[4]; //\u5199WAVE\r\n} descriptor_chunk; /*!< Canonical WAVE format starts with the RIFF header */\n"})}),"\n",(0,r.jsx)(n.h3,{id:"fmt\u5757",children:"FMT\u5757"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'struct {\r\n    char subchunk_id[4]; //\u5c0f\u5199\u5b57\u7b26\u4e32fmt\r\n    uint32_t subchunk_size; //\u5176\u6570\u503c\u4e0d\u786e\u5b9a,\u53d6\u51b3\u4e8e\u7f16\u7801\u683c\u5f0f\u3002\u5982\u679c\u662fPCM\u7684\u8bdd\u4e3a16\r\n    uint16_t audio_format; //PCM\u4e3a1\r\n    uint16_t num_of_channels; //\u5355\u58f0\u9053\u4e3a1\uff0c\u7acb\u4f53\u58f0\u6216\u53cc\u58f0\u9053\u4e3a2\r\n    uint32_t sample_rate; //\u6bcf\u4e2a\u58f0\u9053\u5355\u4f4d\u65f6\u95f4\u91c7\u6837\u6b21\u6570\u3002\u5e38\u7528\u7684\u91c7\u6837\u9891\u7387\u6709 11025, 22050 \u548c 44100 kHz\u3002\r\n    uint32_t byte_rate; //\u8be5\u6570\u503c\u4e3a:\u58f0\u9053\u6570\xd7\u91c7\u6837\u9891\u7387\xd7\u6bcf\u6837\u672c\u7684\u6570\u636e\u4f4d\u6570/8\u3002\u64ad\u653e\u8f6f\u4ef6\u5229\u7528\u6b64\u503c\u53ef\u4ee5\u4f30\u8ba1\u7f13\u51b2\u533a\u7684\u5927\u5c0f\u3002\r\n    uint16_t block_align; //\u91c7\u6837\u5e27\u5927\u5c0f\u3002\u8be5\u6570\u503c\u4e3a:\u58f0\u9053\u6570\xd7\u4f4d\u6570/8\u3002\u64ad\u653e\u8f6f\u4ef6\u9700\u8981\u4e00\u6b21\u5904\u7406\u591a\u4e2a\u8be5\u503c\u5927\u5c0f\u7684\u5b57\u8282\u6570\u636e,\u7528\u8be5\u6570\u503c\u8c03\u6574\u7f13\u51b2\u533a\u3002\r\n    uint16_t bits_per_sample; //\u91c7\u6837\u4f4d\u6570\r\n} fmt_chunk; /*!< The "fmt " subchunk describes the sound data\'s format */\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\u6570\u636e\u5757",children:"\u6570\u636e\u5757"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'struct {\r\n    char subchunk_id[4]; /*!< Contains the letters "data" */\r\n    uint32_t subchunk_size; /*!< ==\u91c7\u6837\u7387 * \u901a\u9053\u6570 * \u6bcf\u4e2a\u6837\u672c\u7684\u6570\u636e\u4f4d\u6570 / 8 */\r\n    int16_t data[0]; /*!< Holds raw audio data */\r\n} data_chunk; /*!< The "data" subchunk contains the size of the data and the actual sound */\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u5b8c\u6574\u7684\u4ee3\u7801\u53ef\u4ee5\u53c2\u8003"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"/*\r\n * SPDX-FileCopyrightText: 2022 Espressif Systems (Shanghai) CO LTD\r\n *\r\n * SPDX-License-Identifier: Unlicense OR CC0-1.0\r\n */\r\n#pragma once\r\n\r\n#include <stdint.h>\r\n\r\n#ifdef __cplusplus\r\nextern \"C\" {\r\n#endif\r\n\r\n/**\r\n * @brief Header structure for WAV file with only one data chunk\r\n *\r\n * @note See this for reference: http://soundfile.sapp.org/doc/WaveFormat/\r\n *\r\n * @note Assignment to variables in this struct directly is only possible for little endian architectures\r\n *       (including Xtensa & RISC-V)\r\n */\r\ntypedef struct {\r\n    struct {\r\n        char chunk_id[4]; /*!< Contains the letters \"RIFF\" in ASCII form */\r\n        uint32_t chunk_size; /*!< This is the size of the rest of the chunk following this number */\r\n        char chunk_format[4]; /*!< Contains the letters \"WAVE\" */\r\n    } descriptor_chunk; /*!< Canonical WAVE format starts with the RIFF header */\r\n    struct {\r\n        char subchunk_id[4]; /*!< Contains the letters \"fmt \" */\r\n        uint32_t subchunk_size; /*!< This is the size of the rest of the Subchunk which follows this number */\r\n        uint16_t audio_format; /*!< PCM = 1, values other than 1 indicate some form of compression */\r\n        uint16_t num_of_channels; /*!< Mono = 1, Stereo = 2, etc. */\r\n        uint32_t sample_rate; /*!< 8000, 44100, etc. */\r\n        uint32_t byte_rate; /*!< ==SampleRate * NumChannels * BitsPerSample s/ 8 */\r\n        uint16_t block_align; /*!< ==NumChannels * BitsPerSample / 8 */\r\n        uint16_t bits_per_sample; /*!< 8 bits = 8, 16 bits = 16, etc. */\r\n    } fmt_chunk; /*!< The \"fmt \" subchunk describes the sound data's format */\r\n    struct {\r\n        char subchunk_id[4]; /*!< Contains the letters \"data\" */\r\n        uint32_t subchunk_size; /*!< ==NumSamples * NumChannels * BitsPerSample / 8 */\r\n        int16_t data[0]; /*!< Holds raw audio data */\r\n    } data_chunk; /*!< The \"data\" subchunk contains the size of the data and the actual sound */\r\n} wav_header_t;\r\n\r\n/**\r\n * @brief Default header for PCM format WAV files\r\n *\r\n */\r\n#define WAV_HEADER_PCM_DEFAULT(wav_sample_size, wav_sample_bits, wav_sample_rate, wav_channel_num) { \\\r\n    .descriptor_chunk = { \\\r\n        .chunk_id = {'R', 'I', 'F', 'F'}, \\\r\n        .chunk_size = (wav_sample_size) + sizeof(wav_header_t) - 8, \\\r\n        .chunk_format = {'W', 'A', 'V', 'E'} \\\r\n    }, \\\r\n    .fmt_chunk = { \\\r\n        .subchunk_id = {'f', 'm', 't', ' '}, \\\r\n        .subchunk_size = 16, /* 16 for PCM */ \\\r\n        .audio_format = 1, /* 1 for PCM */ \\\r\n        .num_of_channels = (wav_channel_num), \\\r\n        .sample_rate = (wav_sample_rate), \\\r\n        .byte_rate = (wav_sample_bits) * (wav_sample_rate) * (wav_channel_num) / 8, \\\r\n        .block_align = (wav_sample_bits) * (wav_channel_num) / 8, \\\r\n        .bits_per_sample = (wav_sample_bits)\\\r\n    }, \\\r\n    .data_chunk = { \\\r\n        .subchunk_id = {'d', 'a', 't', 'a'}, \\\r\n        .subchunk_size = (wav_sample_size) \\\r\n    } \\\r\n}\r\n\r\n#ifdef __cplusplus\r\n}\r\n#endif\n"})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},5882:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/wav_formate-2bd3518fb615ebc0be47ae36fa9aa3b1.png"},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var r=t(6540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);