"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[472],{5141:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>t,default:()=>o,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var i=n(4848),_=n(8453);const s={},t="\u767e\u5ea6\u8bed\u97f3\u8bc6\u522b",a={id:"espressif/\u4e2a\u4eba\u5b66\u4e60/IDF/http_baidu_speech",title:"\u767e\u5ea6\u8bed\u97f3\u8bc6\u522b",description:"1.\u5f00\u53d1\u73af\u5883\uff1a",source:"@site/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/IDF/http_baidu_speech.md",sourceDirName:"espressif/\u4e2a\u4eba\u5b66\u4e60/IDF",slug:"/espressif/\u4e2a\u4eba\u5b66\u4e60/IDF/http_baidu_speech",permalink:"/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/IDF/http_baidu_speech",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/IDF/http_baidu_speech.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u767e\u5ea6\u56fe\u50cf\u8bc6\u522b",permalink:"/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/IDF/http_baidu"},next:{title:"IDF\u547d\u4ee4\u4f7f\u7528\u8bb0\u5f55",permalink:"/docs/espressif/\u4e2a\u4eba\u5b66\u4e60/IDF/idf_use_record"}},l={},c=[{value:"1.\u5f00\u53d1\u73af\u5883\uff1a",id:"1\u5f00\u53d1\u73af\u5883",level:2},{value:"2.ESP32",id:"2esp32",level:2},{value:"1.\u6574\u4f53\u6d41\u7a0b\uff1a",id:"1\u6574\u4f53\u6d41\u7a0b",level:3},{value:"2.spiffs\u521b\u5efa",id:"2spiffs\u521b\u5efa",level:3},{value:"3.i2s\u521d\u59cb\u5316",id:"3i2s\u521d\u59cb\u5316",level:3},{value:"4.http\u8bf7\u6c42",id:"4http\u8bf7\u6c42",level:3},{value:"1.\u8bbe\u7f6eesp http client\u7684url",id:"1\u8bbe\u7f6eesp-http-client\u7684url",level:4},{value:"2.\u7136\u540e\u8bbe\u7f6eheader",id:"2\u7136\u540e\u8bbe\u7f6eheader",level:4},{value:"3.\u586b\u5199post_field",id:"3\u586b\u5199post_field",level:4},{value:"4.\u6574\u4f53\u8c03\u7528",id:"4\u6574\u4f53\u8c03\u7528",level:4},{value:"3.\u5b9e\u9a8c\u6548\u679c",id:"3\u5b9e\u9a8c\u6548\u679c",level:2}];function f(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,_.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h1,{id:"\u767e\u5ea6\u8bed\u97f3\u8bc6\u522b",children:"\u767e\u5ea6\u8bed\u97f3\u8bc6\u522b"}),"\n",(0,i.jsx)(r.h2,{id:"1\u5f00\u53d1\u73af\u5883",children:"1.\u5f00\u53d1\u73af\u5883\uff1a"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"esp-idf 5.1"}),"\n",(0,i.jsx)(r.li,{children:"esp32 s3"}),"\n",(0,i.jsxs)(r.li,{children:["microphone",":MSM261S4030H0"]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["\u767e\u5ea6\u6587\u6863\uff1a",(0,i.jsx)(r.a,{href:"https://ai.baidu.com/ai-doc/SPEECH/Jlbxdezuf",children:"\u77ed\u8bed\u97f3\u8bc6\u522b\u6807\u51c6\u7248API"})]}),"\n",(0,i.jsx)(r.p,{children:"\u8fd9\u91cc\u8bf7\u6c42\u6211\u4eec\u9009\u62e9RAW\u65b9\u5f0f"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"Content-Type: audio/pcm;rate=16000\n"})}),"\n",(0,i.jsx)(r.p,{children:"\u8bf7\u6c42\u683c\u5f0f\u5982\u4e0b\uff1a"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"POST http://vop.baidu.com/server_api?dev_pid=1537&cuid=******&token=1.a6b7dbd428f731035f771b8d********.86400.1292922000-2346678-124328\n"})}),"\n",(0,i.jsx)(r.h2,{id:"2esp32",children:"2.ESP32"}),"\n",(0,i.jsx)(r.h3,{id:"1\u6574\u4f53\u6d41\u7a0b",children:"1.\u6574\u4f53\u6d41\u7a0b\uff1a"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:"\u5f55\u97f3"}),"\n",(0,i.jsx)(r.li,{children:"\u8f6c\u6210wav\u683c\u5f0f\uff0c\u4fdd\u5b58\u81f3spiffs"}),"\n",(0,i.jsx)(r.li,{children:"\u8bfb\u53d6\u4fdd\u5b58\u7684wav\u6587\u4ef6\u5230buffer"}),"\n",(0,i.jsx)(r.li,{children:"\u8c03\u7528http client"}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"\u5173\u4e8e\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u8981\u4fdd\u5b58\u5230spiffs\uff0c\u4e3b\u8981\u662f\u8003\u8651\u5230\u5f55\u5236\u7684\u65f6\u95f4\u592a\u957f\u7684\uff0cmalloc\u4e00\u5757\u5927buffer\u5bb9\u6613\u5931\u8d25"}),"\n",(0,i.jsx)(r.h3,{id:"2spiffs\u521b\u5efa",children:"2.spiffs\u521b\u5efa"}),"\n",(0,i.jsx)(r.p,{children:"\u6211\u7684\u5206\u533a\u8868\u5982\u4e0b"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"# Name,   Type, SubType, Offset,  Size, Flags\r\n# Note: if you have increased the bootloader size, make sure to update the offsets to avoid overlap\r\nnvs,      data, nvs,     0x9000,  0x6000,\r\nphy_init, data, phy,     0xf000,  0x1000,\r\nfactory,  app,  factory, 0x10000, 1M,\r\nstorage,  data, spiffs,  ,        2000K,\n"})}),"\n",(0,i.jsx)(r.p,{children:"\u5173\u4e8espiffs\u53ef\u4ee5\u53c2\u8003idf\u7684\u4f8b\u5b50\uff0c\u6211\u7684\u5982\u4e0b"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:'#include "app_spiffs.h"\r\n\r\nstatic const char *TAG = "SPIFFS";\r\n\r\nesp_err_t app_spiffs_init(char *mount_path)\r\n{\r\n    esp_err_t ret;\r\n    esp_vfs_spiffs_conf_t conf = {\r\n        .base_path = mount_path,\r\n        .partition_label = NULL,\r\n        .max_files = 5,\r\n        .format_if_mount_failed = true, // \u5982\u679c\u6302\u8f7d\u5931\u8d25\uff0c\u5c06\u683c\u5f0f\u5316\u6587\u4ef6\u7cfb\u7edf\r\n    };\r\n\r\n    ESP_ERROR_CHECK(esp_vfs_spiffs_register(&conf));\r\n\r\n    // \u68c0\u67e5spiffs\r\n    ret = esp_spiffs_check(conf.partition_label);\r\n    if (ret != ESP_OK)\r\n    {\r\n        ESP_LOGI(TAG, "SPIFFS Check failed:%s", esp_err_to_name(ret));\r\n    }\r\n    else\r\n    {\r\n        ESP_LOGI(TAG, "SPIFFS Check success");\r\n    }\r\n\r\n    // \u83b7\u53d6spiffs\u7684\u4fe1\u606f\r\n    size_t total = 0, used = 0;\r\n    ret = esp_spiffs_info(conf.partition_label, &total, &used);\r\n    if (ret != ESP_OK)\r\n    {\r\n        ESP_LOGI(TAG, "Failed to get spiffs partition info:%s", esp_err_to_name(ret));\r\n        return ESP_FAIL;\r\n    }\r\n    else\r\n    {\r\n        ESP_LOGI(TAG, "Partition size: total:%d,used:%d ", total, used);\r\n    }\r\n\r\n    // \u5982\u679cused > total\uff0c\u518d\u6b21\u68c0\u67e5\r\n    if (used > total)\r\n    {\r\n        ESP_LOGW(TAG, "Number of used bytes cannot be larger than total. Performing SPIFFS_check().");\r\n        ret = esp_spiffs_check(conf.partition_label);\r\n        if (ret != ESP_OK)\r\n        {\r\n            ESP_LOGE(TAG, "SPIFFS_check() failed (%s)", esp_err_to_name(ret));\r\n            return ESP_FAIL;\r\n        }\r\n        else\r\n        {\r\n            ESP_LOGI(TAG, "SPIFFS_check() successful");\r\n        }\r\n    }\r\n    return ret;\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"3i2s\u521d\u59cb\u5316",children:"3.i2s\u521d\u59cb\u5316"}),"\n",(0,i.jsxs)(r.p,{children:["i2s\u7684\u5f55\u97f3\u4e3b\u8981\u53c2\u8003idf\u7684\u4f8b\u5b50\uff1a",(0,i.jsx)(r.a,{href:"https://github.com/espressif/esp-idf/tree/master/examples/peripherals/i2s/i2s_recorder",children:"IDF I2S\u5f55\u97f3"})]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:'#include "hal_i2s.h"\r\n#include "app_spiffs.h"\r\n#include <sys/unistd.h>\r\n#include <sys/stat.h>\r\n#include "esp_log.h"\r\n#include "esp_heap_caps.h"\r\n\r\nstatic const char *TAG = "AUDIO";\r\ni2s_chan_handle_t rx_handle = NULL;\r\nrecord_info_t record_info = {};\r\n\r\nesp_err_t hal_i2s_microphone_init(i2s_microphone_config_t config)\r\n{\r\n    esp_err_t ret_val = ESP_OK;\r\n    i2s_chan_config_t chan_cfg = I2S_CHANNEL_DEFAULT_CONFIG(config.i2s_num, I2S_ROLE_MASTER);\r\n\r\n    ret_val |= i2s_new_channel(&chan_cfg, NULL, &rx_handle);\r\n    i2s_std_config_t std_cfg = {\r\n        .clk_cfg = I2S_STD_CLK_DEFAULT_CONFIG(config.sample_rate),\r\n        .slot_cfg = I2S_STD_PHILIPS_SLOT_DEFAULT_CONFIG(config.bits_per_sample, I2S_SLOT_MODE_MONO),\r\n        .gpio_cfg = {\r\n            .mclk = GPIO_NUM_NC,\r\n            .bclk = config.bclk_pin,\r\n            .ws = config.ws_pin,\r\n            .dout = GPIO_NUM_NC,\r\n            .din = config.din_pin,\r\n            .invert_flags = {\r\n                .mclk_inv = false,\r\n                .bclk_inv = false,\r\n                .ws_inv = false,\r\n            },\r\n        },\r\n    };\r\n\r\n    std_cfg.slot_cfg.slot_mask = I2S_STD_SLOT_LEFT;\r\n    ret_val |= i2s_channel_init_std_mode(rx_handle, &std_cfg);\r\n    ret_val |= i2s_channel_enable(rx_handle);\r\n    record_info.i2s_config = config;\r\n    return ret_val;\r\n}\r\n\r\nvoid hal_i2s_record(char *file_path, int record_time)\r\n{\r\n    ESP_LOGI(TAG, "Start Record");\r\n    record_info.flash_wr_size = 0;\r\n    record_info.byte_rate = 1 * record_info.i2s_config.sample_rate * record_info.i2s_config.bits_per_sample / 8; // \u58f0\u9053\u6570\xd7\u91c7\u6837\u9891\u7387\xd7\u6bcf\u6837\u672c\u7684\u6570\u636e\u4f4d\u6570/8\u3002\u64ad\u653e\u8f6f\u4ef6\u5229\u7528\u6b64\u503c\u53ef\u4ee5\u4f30\u8ba1\u7f13\u51b2\u533a\u7684\u5927\u5c0f\u3002\r\n    record_info.bytes_all = record_info.byte_rate * record_time;                                                 // \u8bbe\u5b9a\u65f6\u95f4\u4e0b\u7684\u6240\u6709\u6570\u636e\u5927\u5c0f\r\n    record_info.sample_size = record_info.i2s_config.bits_per_sample * 1024;                                     // \u6bcf\u4e00\u6b21\u91c7\u6837\u7684\u5e26\u4e0b\r\n    const wav_header_t wav_header = WAV_HEADER_PCM_DEFAULT(record_info.bytes_all, record_info.i2s_config.bits_per_sample, record_info.i2s_config.sample_rate, 1);\r\n\r\n    // \u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728\r\n    struct stat st;\r\n    if (stat(file_path, &st) == 0)\r\n    {\r\n        ESP_LOGI(TAG, "%s exit", file_path);\r\n        unlink(file_path); // \u5982\u679c\u5b58\u5728\u5c31\u5220\u9664\r\n    }\r\n\r\n    // \u521b\u5efaWAV\u6587\u4ef6\r\n    FILE *f = fopen(file_path, "a");\r\n    if (f == NULL)\r\n    {\r\n        ESP_LOGI(TAG, "Failed to open file");\r\n        return;\r\n    }\r\n    fwrite(&wav_header, sizeof(wav_header), 1, f);\r\n\r\n    while (record_info.flash_wr_size < record_info.bytes_all)\r\n    {\r\n        char *i2s_raw_buffer = heap_caps_calloc(1, record_info.sample_size, MALLOC_CAP_DMA);\r\n        if (i2s_raw_buffer == NULL)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        // Malloc success\r\n        if (i2s_channel_read(rx_handle, i2s_raw_buffer, record_info.sample_size, &record_info.read_size, 100) == ESP_OK)\r\n        {\r\n            fwrite(i2s_raw_buffer, record_info.read_size, 1, f);\r\n            record_info.flash_wr_size += record_info.read_size;\r\n        }\r\n        else\r\n        {\r\n            ESP_LOGI(TAG, "Read Failed!\\n");\r\n        }\r\n        free(i2s_raw_buffer);\r\n    }\r\n\r\n    ESP_LOGI(TAG, "Recording done!");\r\n    fclose(f);\r\n    ESP_LOGI(TAG, "File written on SDCard");\r\n}\n'})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:'#pragma once\r\n\r\n#include "driver/i2s_common.h"\r\n#include "driver/i2s_std.h"\r\n#include "driver/i2s_tdm.h"\r\n#include "driver/gpio.h"\r\n#include "driver/i2s_pdm.h"\r\n#include "wav_formate.h"\r\n\r\ntypedef struct\r\n{\r\n    uint16_t sample_rate;\r\n    uint16_t bits_per_sample;\r\n    gpio_num_t ws_pin;\r\n    gpio_num_t bclk_pin;\r\n    gpio_num_t din_pin;\r\n    i2s_port_t i2s_num;\r\n} i2s_microphone_config_t;\r\n\r\ntypedef struct\r\n{\r\n    i2s_microphone_config_t i2s_config; // i2s\u7684\u914d\u7f6e\u4fe1\u606f\r\n    int byte_rate;                      // 1s\u4e0b\u7684\u91c7\u6837\u6570\u636e\r\n    int bytes_all;                      // \u5f55\u97f3\u65f6\u95f4\u4e0b\u7684\u6240\u6709\u6570\u636e\u5927\u5c0f\r\n    int sample_size;                    // \u6bcf\u4e00\u6b21\u91c7\u6837\u7684\u5927\u5c0f\r\n    int flash_wr_size;                  // \u5f53\u524d\u5f55\u97f3\u7684\u5927\u5c0f\r\n    size_t read_size;                   // i2s\u8bfb\u51fa\u7684\u957f\u5ea6\r\n} record_info_t;\r\n\r\nextern i2s_chan_handle_t rx_handle;\r\n\r\nesp_err_t hal_i2s_microphone_init(i2s_microphone_config_t config);\r\nvoid hal_i2s_record(char *file_path, int record_time);\n'})}),"\n",(0,i.jsx)(r.h3,{id:"4http\u8bf7\u6c42",children:"4.http\u8bf7\u6c42"}),"\n",(0,i.jsx)(r.p,{children:"\u9996\u5148\u6211\u4eec\u628a\u4fdd\u5b58\u7684wav\u6587\u4ef6\u8bfb\u53d6\u51fa\u6765"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:'wav_file = fopen("/spiffs/record.wav", "r");\r\nif (wav_file == NULL)\r\n{\r\n    ESP_LOGI(TAG, "Read audio file failed");\r\n}\r\nfseek(wav_file, 0, SEEK_END);\r\nwav_file_size = ftell(wav_file);\r\nfseek(wav_file, 0, SEEK_SET);\r\nESP_LOGI(TAG, "WAV File size:%zu", wav_file_size);\r\nwav_raw_buffer = heap_caps_malloc(wav_file_size + 1, MALLOC_CAP_DMA);\r\nif (wav_raw_buffer == NULL)\r\n{\r\n    ESP_LOGI(TAG, "Malloc wav raw buffer fail");\r\n    return;\r\n}\r\nfread(wav_raw_buffer, 1, wav_file_size, wav_file);\r\nfclose(wav_file);\n'})}),"\n",(0,i.jsx)(r.h4,{id:"1\u8bbe\u7f6eesp-http-client\u7684url",children:"1.\u8bbe\u7f6eesp http client\u7684url"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:'char *access_token = "xxx";\r\nchar *url_formate = "http://vop.baidu.com/server_api?dev_pid=1537&cuid=dPKArKm9yCGIOwPoCSjTDzmIIj4cBsEV&token=%s";\n'})}),"\n",(0,i.jsx)(r.p,{children:"\u8fd9\u91cc\u7684access_token\u9700\u8981\u81ea\u5df1\u53bbapi\u63a7\u5236\u53f0\u83b7\u53d6"}),"\n",(0,i.jsx)(r.h4,{id:"2\u7136\u540e\u8bbe\u7f6eheader",children:"2.\u7136\u540e\u8bbe\u7f6eheader"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:'esp_http_client_set_header(client, "Content-Type", "audio/pcm;rate=16000");\r\nesp_http_client_set_header(client, "Accept", "application/json");\n'})}),"\n",(0,i.jsx)(r.h4,{id:"3\u586b\u5199post_field",children:"3.\u586b\u5199post_field"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"esp_http_client_set_post_field(client, wav_raw_buffer, wav_file_size);\n"})}),"\n",(0,i.jsx)(r.h4,{id:"4\u6574\u4f53\u8c03\u7528",children:"4.\u6574\u4f53\u8c03\u7528"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:'void app_main(void)\r\n{\r\n    // Init NVS\r\n    esp_err_t ret = nvs_flash_init();\r\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\r\n    {\r\n        ESP_ERROR_CHECK(nvs_flash_erase());\r\n        ret = nvs_flash_init();\r\n    }\r\n    ESP_ERROR_CHECK(ret);\r\n\r\n    // Connect WIFI\r\n    app_wifi_init("MERCURY_5B00", "tzyjy12345678");\r\n\r\n    // Init spiffs\r\n    ESP_ERROR_CHECK(app_spiffs_init("/spiffs"));\r\n\r\n    // Init i2s microphone\r\n    ESP_ERROR_CHECK(hal_i2s_microphone_init(i2s_microphone_config));\r\n    hal_i2s_record("/spiffs/record.wav", 5);\r\n    wav_file = fopen("/spiffs/record.wav", "r");\r\n    if (wav_file == NULL)\r\n    {\r\n        ESP_LOGI(TAG, "Read audio file failed");\r\n    }\r\n    fseek(wav_file, 0, SEEK_END);\r\n    wav_file_size = ftell(wav_file);\r\n    fseek(wav_file, 0, SEEK_SET);\r\n    ESP_LOGI(TAG, "WAV File size:%zu", wav_file_size);\r\n    wav_raw_buffer = heap_caps_malloc(wav_file_size + 1, MALLOC_CAP_DMA);\r\n    if (wav_raw_buffer == NULL)\r\n    {\r\n        ESP_LOGI(TAG, "Malloc wav raw buffer fail");\r\n        return;\r\n    }\r\n    fread(wav_raw_buffer, 1, wav_file_size, wav_file);\r\n    fclose(wav_file);\r\n\r\n    // HTTP\r\n    esp_http_client_config_t config = {\r\n        .method = HTTP_METHOD_POST,\r\n        .event_handler = app_http_baidu_speech_recognition_event_handler,\r\n        .buffer_size = 4 * 1024,\r\n    };\r\n    char *url = heap_caps_malloc(strlen(url_formate) + strlen(access_token) + 1, MALLOC_CAP_DMA);\r\n    sprintf(url, url_formate, access_token);\r\n    config.url = url;\r\n    client = esp_http_client_init(&config);\r\n    esp_http_client_set_method(client, HTTP_METHOD_POST);\r\n    esp_http_client_set_header(client, "Content-Type", "audio/pcm;rate=16000");\r\n    esp_http_client_set_header(client, "Accept", "application/json");\r\n    esp_http_client_set_post_field(client, wav_raw_buffer, wav_file_size);\r\n\r\n    esp_err_t err = esp_http_client_perform(client);\r\n    if (err == ESP_OK)\r\n    {\r\n        ESP_LOGI(TAG, "HTTP GET Status = %d, content_length = %d", esp_http_client_get_status_code(client), (int)esp_http_client_get_content_length(client));\r\n    }\r\n    else\r\n    {\r\n        ESP_LOGI(TAG, "HTTP GET request failed: %s", esp_err_to_name(err));\r\n    }\r\n    esp_http_client_cleanup(client);\r\n\r\n    free(url);\r\n}\r\n\n'})}),"\n",(0,i.jsx)(r.h2,{id:"3\u5b9e\u9a8c\u6548\u679c",children:"3.\u5b9e\u9a8c\u6548\u679c"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.img,{src:n(8051).A+"",width:"2138",height:"504"})})]})}function o(e={}){const{wrapper:r}={...(0,_.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}},8051:(e,r,n)=>{n.d(r,{A:()=>i});const i=n.p+"assets/images/baidu_speech-0a259f76fbf6bcccc6fbead45d320ae3.png"},8453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>a});var i=n(6540);const _={},s=i.createContext(_);function t(e){const r=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(_):e.components||_:t(e.components),i.createElement(s.Provider,{value:r},e.children)}}}]);